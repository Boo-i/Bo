<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>استمارة تسجيل طفل جديد - Bright Kids</title>
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@200;300;400;500;700;800;900&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Tajawal', Arial, sans-serif;
            direction: rtl;
            text-align: right;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            padding: 2rem;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #FF6B35 0%, #4A90E2 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }

        .logo {
            width: 80px;
            height: 80px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            margin: 0 auto 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            font-weight: bold;
            backdrop-filter: blur(10px);
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            font-weight: 800;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
            margin: 0.25rem 0;
        }

        .form-container {
            padding: 2rem;
        }

        .progress-bar {
            background: #e0e0e0;
            height: 8px;
            border-radius: 4px;
            margin-bottom: 2rem;
            overflow: hidden;
        }

        .progress-fill {
            background: linear-gradient(135deg, #FF6B35 0%, #4A90E2 100%);
            height: 100%;
            width: 25%;
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        .step-indicator {
            text-align: center;
            margin-bottom: 2rem;
            color: #4A90E2;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .form-section {
            margin-bottom: 2rem;
        }

        .section-title {
            color: #4A90E2;
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 3px solid #FF6B35;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        label {
            display: block;
            color: #333;
            font-weight: 600;
            margin-bottom: 0.5rem;
            font-size: 1rem;
        }

        .required {
            color: #FF6B35;
        }

        input, select, textarea {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 1rem;
            font-family: inherit;
            transition: all 0.3s ease;
            background: white;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #4A90E2;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
            transform: translateY(-2px);
        }

        .radio-group {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .radio-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            padding: 0.75rem 1rem;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            transition: all 0.3s ease;
            background: white;
        }

        .radio-item:hover {
            border-color: #4A90E2;
            background: rgba(74, 144, 226, 0.05);
        }

        .radio-item input[type="radio"]:checked + span {
            color: #4A90E2;
            font-weight: 600;
        }

        .file-upload {
            border: 3px dashed #4A90E2;
            border-radius: 15px;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: rgba(74, 144, 226, 0.02);
        }

        .file-upload:hover {
            border-color: #FF6B35;
            background: rgba(255, 107, 53, 0.05);
            transform: translateY(-2px);
        }

        .file-upload-icon {
            font-size: 3rem;
            color: #4A90E2;
            margin-bottom: 1rem;
        }

        .navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 2px solid #e1e5e9;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 10px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-family: inherit;
        }

        .btn-primary {
            background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 107, 53, 0.3);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #4A90E2 0%, #357ABD 100%);
            color: white;
        }

        .btn-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(74, 144, 226, 0.3);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none !important;
        }

        .footer {
            text-align: center;
            color: #666;
            font-size: 0.9rem;
            margin-top: 2rem;
            padding: 1rem;
            background: rgba(74, 144, 226, 0.05);
            border-radius: 10px;
        }

        .footer a {
            color: #4A90E2;
            text-decoration: none;
        }

        .footer a:hover {
            text-decoration: underline;
        }

        .success-message {
            background: linear-gradient(135deg, #6BCF7F 0%, #4CAF50 100%);
            color: white;
            padding: 2rem;
            border-radius: 15px;
            text-align: center;
            margin: 2rem 0;
        }

        .success-message h2 {
            font-size: 2rem;
            margin-bottom: 1rem;
        }

        .ticket {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            margin: 2rem 0;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 2px dashed #4A90E2;
        }

        .ticket-header {
            text-align: center;
            border-bottom: 2px solid #e1e5e9;
            padding-bottom: 1rem;
            margin-bottom: 1rem;
        }

        .ticket-number {
            font-size: 2rem;
            font-weight: bold;
            color: #FF6B35;
            margin-bottom: 0.5rem;
        }

        .ticket-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin: 1rem 0;
        }

        .info-item {
            padding: 0.5rem;
            border-radius: 8px;
            background: rgba(74, 144, 226, 0.05);
        }

        .info-label {
            font-weight: 600;
            color: #4A90E2;
            font-size: 0.9rem;
        }

        .info-value {
            color: #333;
            font-size: 1rem;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 2rem;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #4A90E2;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
            border: 1px solid #f5c6cb;
        }

        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }

            .header h1 {
                font-size: 2rem;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .navigation {
                flex-direction: column;
                gap: 1rem;
            }

            .btn {
                width: 100%;
                justify-content: center;
            }

            .radio-group {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="logo">BK</div>
            <h1>استمارة تسجيل طفل جديد</h1>
            <p>مركز Bright Kids للحضانة - YADC7069</p>
            <p>حي قرطبة، 46429، ينبع | +966 53 750 6160</p>
        </div>

        <div class="form-container">
            <!-- Progress Bar -->
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>

            <!-- Step Indicator -->
            <div class="step-indicator" id="stepIndicator">
                الخطوة 1 من 3: بيانات الطفل
            </div>

            <!-- Loading -->
            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>جاري إرسال الطلب...</p>
            </div>

            <!-- Form -->
            <form id="registrationForm" enctype="multipart/form-data">
                <div class="form-step" id="formContent">
                    <div class="form-section">
                        <h2 class="section-title">بيانات الطفل</h2>
                        
                        <div class="form-grid">
                            <div class="form-group">
                                <label for="childName">الاسم الكامل للطفل <span class="required">*</span></label>
                                <input type="text" id="childName" name="childName" required placeholder="أدخل الاسم الكامل">
                            </div>

                            <div class="form-group">
                                <label for="birthDate">تاريخ الميلاد <span class="required">*</span></label>
                                <input type="date" id="birthDate" name="birthDate" required>
                            </div>

                            <div class="form-group">
                                <label for="age">العمر <span class="required">*</span></label>
                                <input type="text" id="age" name="age" required placeholder="مثال: سنتان و 6 أشهر">
                            </div>

                            <div class="form-group">
                                <label>الجنس <span class="required">*</span></label>
                                <div class="radio-group">
                                    <label class="radio-item">
                                        <input type="radio" name="gender" value="ذكر" required>
                                        <span>ذكر</span>
                                    </label>
                                    <label class="radio-item">
                                        <input type="radio" name="gender" value="أنثى" required>
                                        <span>أنثى</span>
                                    </label>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="nationality">الجنسية <span class="required">*</span></label>
                                <input type="text" id="nationality" name="nationality" required placeholder="الجنسية">
                            </div>

                            <div class="form-group">
                                <label for="birthPlace">مكان الميلاد <span class="required">*</span></label>
                                <input type="text" id="birthPlace" name="birthPlace" required placeholder="مكان الميلاد">
                            </div>

                            <div class="form-group full-width">
                                <label>صورة الطفل <span class="required">*</span></label>
                                <div class="file-upload" onclick="document.getElementById('childPhoto').click()">
                                    <div class="file-upload-icon">📷</div>
                                    <p>اضغط لرفع صورة الطفل</p>
                                    <small>يُفضل صورة واضحة وحديثة</small>
                                    <input type="file" id="childPhoto" name="childPhoto" accept="image/*" style="display: none;" required>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Navigation -->
                <div class="navigation" id="navigation">
                    <button type="button" class="btn btn-secondary" id="prevBtn" onclick="prevStep()" disabled>السابق</button>
                    <button type="button" class="btn btn-primary" id="nextBtn" onclick="nextStep()">التالي</button>
                </div>
            </form>

            <!-- Footer -->
            <div class="footer">
                <p>جميع الحقول المميزة بـ (*) مطلوبة</p>
                <p>
                    للمساعدة: +966 53 750 6160 | 
                    <a href="https://www.google.com/maps/dir/?api=1&destination=24.0857962992111%2C38.0875255905884" target="_blank">
                        الموقع على الخريطة
                    </a>
                </p>
            </div>
        </div>
    </div>

    <script>
        let currentStep = 1;
        const totalSteps = 3;
        let formData = {};

        const stepNames = [
            'بيانات الطفل',
            'بيانات ولي الأمر', 
            'مراجعة وإرسال'
        ];

        function updateProgress() {
            const progressFill = document.getElementById('progressFill');
            const stepIndicator = document.getElementById('stepIndicator');
            const prevBtn = document.getElementById('prevBtn');
            
            const percentage = (currentStep / totalSteps) * 100;
            progressFill.style.width = percentage + '%';
            
            stepIndicator.textContent = `الخطوة ${currentStep} من ${totalSteps}: ${stepNames[currentStep - 1]}`;
            
            prevBtn.disabled = currentStep === 1;
        }

        function collectFormData() {
            const form = document.getElementById('registrationForm');
            const formDataObj = new FormData(form);
            
            for (let [key, value] of formDataObj.entries()) {
                formData[key] = value;
            }
        }

        function nextStep() {
            if (currentStep < totalSteps) {
                collectFormData();
                currentStep++;
                updateProgress();
                
                if (currentStep === 2) {
                    showStep2();
                } else if (currentStep === 3) {
                    showStep3();
                }
            }
        }

        function prevStep() {
            if (currentStep > 1) {
                currentStep--;
                updateProgress();
                
                if (currentStep === 1) {
                    showStep1();
                } else if (currentStep === 2) {
                    showStep2();
                }
            }
        }

        function showStep1() {
            const formContent = document.getElementById('formContent');
            formContent.innerHTML = `
                <div class="form-section">
                    <h2 class="section-title">بيانات الطفل</h2>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="childName">الاسم الكامل للطفل <span class="required">*</span></label>
                            <input type="text" id="childName" name="childName" required placeholder="أدخل الاسم الكامل" value="${formData.childName || ''}">
                        </div>

                        <div class="form-group">
                            <label for="birthDate">تاريخ الميلاد <span class="required">*</span></label>
                            <input type="date" id="birthDate" name="birthDate" required value="${formData.birthDate || ''}">
                        </div>

                        <div class="form-group">
                            <label for="age">العمر <span class="required">*</span></label>
                            <input type="text" id="age" name="age" required placeholder="مثال: سنتان و 6 أشهر" value="${formData.age || ''}">
                        </div>

                        <div class="form-group">
                            <label>الجنس <span class="required">*</span></label>
                            <div class="radio-group">
                                <label class="radio-item">
                                    <input type="radio" name="gender" value="ذكر" required ${formData.gender === 'ذكر' ? 'checked' : ''}>
                                    <span>ذكر</span>
                                </label>
                                <label class="radio-item">
                                    <input type="radio" name="gender" value="أنثى" required ${formData.gender === 'أنثى' ? 'checked' : ''}>
                                    <span>أنثى</span>
                                </label>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="nationality">الجنسية <span class="required">*</span></label>
                            <input type="text" id="nationality" name="nationality" required placeholder="الجنسية" value="${formData.nationality || ''}">
                        </div>

                        <div class="form-group">
                            <label for="birthPlace">مكان الميلاد <span class="required">*</span></label>
                            <input type="text" id="birthPlace" name="birthPlace" required placeholder="مكان الميلاد" value="${formData.birthPlace || ''}">
                        </div>
                    </div>
                </div>
            `;
            
            updateNavigation();
        }

        function showStep2() {
            const formContent = document.getElementById('formContent');
            formContent.innerHTML = `
                <div class="form-section">
                    <h2 class="section-title">بيانات ولي الأمر</h2>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="parentName">اسم ولي الأمر <span class="required">*</span></label>
                            <input type="text" id="parentName" name="parentName" required placeholder="الاسم الكامل لولي الأمر" value="${formData.parentName || ''}">
                        </div>

                        <div class="form-group">
                            <label for="relationship">صلة القرابة <span class="required">*</span></label>
                            <select id="relationship" name="relationship" required>
                                <option value="">اختر صلة القرابة</option>
                                <option value="الأب" ${formData.relationship === 'الأب' ? 'selected' : ''}>الأب</option>
                                <option value="الأم" ${formData.relationship === 'الأم' ? 'selected' : ''}>الأم</option>
                                <option value="الجد" ${formData.relationship === 'الجد' ? 'selected' : ''}>الجد</option>
                                <option value="الجدة" ${formData.relationship === 'الجدة' ? 'selected' : ''}>الجدة</option>
                                <option value="العم" ${formData.relationship === 'العم' ? 'selected' : ''}>العم</option>
                                <option value="العمة" ${formData.relationship === 'العمة' ? 'selected' : ''}>العمة</option>
                                <option value="الخال" ${formData.relationship === 'الخال' ? 'selected' : ''}>الخال</option>
                                <option value="الخالة" ${formData.relationship === 'الخالة' ? 'selected' : ''}>الخالة</option>
                                <option value="أخرى" ${formData.relationship === 'أخرى' ? 'selected' : ''}>أخرى</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="phoneNumber">رقم الجوال <span class="required">*</span></label>
                            <input type="tel" id="phoneNumber" name="phoneNumber" required placeholder="+966 53 750 6160" value="${formData.phoneNumber || ''}">
                        </div>

                        <div class="form-group">
                            <label for="emergencyPhone">رقم آخر للطوارئ <span class="required">*</span></label>
                            <input type="tel" id="emergencyPhone" name="emergencyPhone" required placeholder="رقم جوال آخر للطوارئ" value="${formData.emergencyPhone || ''}">
                        </div>

                        <div class="form-group">
                            <label for="email">البريد الإلكتروني <span class="required">*</span></label>
                            <input type="email" id="email" name="email" required placeholder="example@email.com" value="${formData.email || ''}">
                        </div>

                        <div class="form-group full-width">
                            <label for="address">العنوان <span class="required">*</span></label>
                            <textarea id="address" name="address" rows="3" required placeholder="العنوان الكامل">${formData.address || ''}</textarea>
                        </div>
                    </div>
                </div>
            `;
            
            updateNavigation();
        }

        function showStep3() {
            collectFormData();
            
            const formContent = document.getElementById('formContent');
            formContent.innerHTML = `
                <div class="form-section">
                    <h2 class="section-title">مراجعة البيانات</h2>
                    
                    <div class="ticket">
                        <div class="ticket-header">
                            <div class="ticket-number">معاينة الطلب</div>
                            <p>تاريخ التقديم: ${new Date().toLocaleDateString('ar-SA')}</p>
                        </div>
                        
                        <div class="ticket-info">
                            <div class="info-item">
                                <div class="info-label">اسم الطفل</div>
                                <div class="info-value">${formData.childName || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">تاريخ الميلاد</div>
                                <div class="info-value">${formData.birthDate || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">العمر</div>
                                <div class="info-value">${formData.age || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">الجنس</div>
                                <div class="info-value">${formData.gender || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">اسم ولي الأمر</div>
                                <div class="info-value">${formData.parentName || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">صلة القرابة</div>
                                <div class="info-value">${formData.relationship || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">رقم الجوال</div>
                                <div class="info-value">${formData.phoneNumber || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">البريد الإلكتروني</div>
                                <div class="info-value">${formData.email || 'غير محدد'}</div>
                            </div>
                        </div>
                        
                        <div style="margin-top: 1.5rem; padding-top: 1.5rem; border-top: 2px solid #e1e5e9;">
                            <p style="text-align: center; color: #666; font-size: 0.9rem;">
                                يرجى مراجعة البيانات والتأكد من صحتها قبل الإرسال
                            </p>
                        </div>
                    </div>
                </div>
            `;
            
            updateNavigation();
        }

        function updateNavigation() {
            const navigation = document.getElementById('navigation');
            
            if (currentStep === totalSteps) {
                navigation.innerHTML = `
                    <button type="button" class="btn btn-secondary" onclick="prevStep()">السابق</button>
                    <button type="button" class="btn btn-primary" onclick="submitForm()">إرسال الطلب</button>
                `;
            } else {
                navigation.innerHTML = `
                    <button type="button" class="btn btn-secondary" id="prevBtn" onclick="prevStep()" ${currentStep === 1 ? 'disabled' : ''}>السابق</button>
                    <button type="button" class="btn btn-primary" id="nextBtn" onclick="nextStep()">التالي</button>
                `;
            }
        }

        async function submitForm() {
            try {
                // إظهار شاشة التحميل
                document.getElementById('loading').classList.add('show');
                document.getElementById('formContent').style.display = 'none';
                document.getElementById('navigation').style.display = 'none';
                
                // جمع البيانات النهائية
                collectFormData();
                
                // إنشاء FormData للإرسال
                const form = document.getElementById('registrationForm');
                const submitData = new FormData(form);
                
                // إضافة البيانات المجمعة
                for (const [key, value] of Object.entries(formData)) {
                    if (typeof value === 'string') {
                        submitData.set(key, value);
                    }
                }
                
                // إرسال الطلب للواجهة الخلفية
                const response = await fetch('http://localhost:5000/api/registration/submit', {
                    method: 'POST',
                    body: submitData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // إخفاء شاشة التحميل
                    document.getElementById('loading').classList.remove('show');
                    
                    // عرض رسالة النجاح والكوبون
                    showSuccessMessage(result);
                } else {
                    throw new Error(result.message || 'حدث خطأ غير متوقع');
                }
                
            } catch (error) {
                console.error('خطأ في إرسال الطلب:', error);
                
                // إخفاء شاشة التحميل
                document.getElementById('loading').classList.remove('show');
                
                // عرض رسالة خطأ
                showErrorMessage(error.message);
                
                // إظهار النموذج مرة أخرى
                document.getElementById('formContent').style.display = 'block';
                document.getElementById('navigation').style.display = 'flex';
            }
        }

        function showSuccessMessage(result) {
            const formContent = document.getElementById('formContent');
            const ticketData = result.ticket_data;
            
            formContent.innerHTML = `
                <div class="success-message">
                    <h2>🎉 تم إرسال الطلب بنجاح!</h2>
                    <p>رقم التسجيل: <strong>${ticketData.registration_number}</strong></p>
                    <p>سيتم التواصل معكم خلال 24 ساعة</p>
                </div>
                
                <div class="ticket">
                    <div class="ticket-header">
                        <div class="ticket-number">${ticketData.registration_number}</div>
                        <p>كوبون تسجيل طفل جديد</p>
                        <p>تاريخ التقديم: ${ticketData.submission_date}</p>
                    </div>
                    
                    <div class="ticket-info">
                        <div class="info-item">
                            <div class="info-label">اسم الطفل</div>
                            <div class="info-value">${ticketData.child_name}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">اسم ولي الأمر</div>
                            <div class="info-value">${ticketData.parent_name}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">رقم الجوال</div>
                            <div class="info-value">${ticketData.phone}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">البريد الإلكتروني</div>
                            <div class="info-value">${ticketData.email}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">حالة الطلب</div>
                            <div class="info-value" style="color: #FF6B35; font-weight: bold;">${ticketData.status}</div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 1.5rem; padding-top: 1.5rem; border-top: 2px solid #e1e5e9; text-align: center;">
                        <p style="color: #4A90E2; font-weight: 600;">${ticketData.nursery_info.name}</p>
                        <p style="color: #666; font-size: 0.9rem;">${ticketData.nursery_info.address}</p>
                        <p style="color: #666; font-size: 0.9rem;">${ticketData.nursery_info.phone} | ${ticketData.nursery_info.license}</p>
                    </div>
                </div>
            `;
            
            // إظهار المحتوى
            formContent.style.display = 'block';
            
            // إخفاء شريط التقدم ومؤشر الخطوة
            document.querySelector('.progress-bar').style.display = 'none';
            document.getElementById('stepIndicator').style.display = 'none';
        }

        function showErrorMessage(message) {
            const formContent = document.getElementById('formContent');
            
            // إضافة رسالة خطأ في أعلى النموذج
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message';
            errorDiv.innerHTML = `
                <strong>خطأ:</strong> ${message}
                <br><small>يرجى المحاولة مرة أخرى أو التواصل معنا على +966 53 750 6160</small>
            `;
            
            formContent.insertBefore(errorDiv, formContent.firstChild);
            
            // إزالة رسالة الخطأ بعد 10 ثوان
            setTimeout(() => {
                if (errorDiv.parentNode) {
                    errorDiv.parentNode.removeChild(errorDiv);
                }
            }, 10000);
        }

        // File upload handling
        document.addEventListener('change', function(e) {
            if (e.target.type === 'file') {
                const file = e.target.files[0];
                if (file) {
                    const fileUpload = e.target.parentElement;
                    fileUpload.innerHTML = `
                        <div class="file-upload-icon">✅</div>
                        <p>تم رفع الملف: ${file.name}</p>
                        <small>اضغط لتغيير الملف</small>
                        <input type="file" id="${e.target.id}" name="${e.target.name}" accept="${e.target.accept}" style="display: none;" required>
                    `;
                    fileUpload.style.borderColor = '#6BCF7F';
                    fileUpload.style.background = 'rgba(108, 207, 127, 0.1)';
                    
                    // إعادة ربط حدث النقر
                    fileUpload.onclick = function() {
                        document.getElementById(e.target.id).click();
                    };
                }
            }
        });

        // Initialize
        updateProgress();
    </script>
</body>
</html>


<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>استمارة تسجيل طفل جديد - Bright Kids</title>
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@200;300;400;500;700;800;900&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Tajawal', Arial, sans-serif;
            direction: rtl;
            text-align: right;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            padding: 2rem;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #FF6B35 0%, #4A90E2 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }

        .logo {
            width: 80px;
            height: 80px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            margin: 0 auto 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            font-weight: bold;
            backdrop-filter: blur(10px);
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            font-weight: 800;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
            margin: 0.25rem 0;
        }

        .form-container {
            padding: 2rem;
        }

        .progress-bar {
            background: #e0e0e0;
            height: 8px;
            border-radius: 4px;
            margin-bottom: 2rem;
            overflow: hidden;
        }

        .progress-fill {
            background: linear-gradient(135deg, #FF6B35 0%, #4A90E2 100%);
            height: 100%;
            width: 25%;
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        .step-indicator {
            text-align: center;
            margin-bottom: 2rem;
            color: #4A90E2;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .form-section {
            margin-bottom: 2rem;
        }

        .section-title {
            color: #4A90E2;
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 3px solid #FF6B35;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        label {
            display: block;
            color: #333;
            font-weight: 600;
            margin-bottom: 0.5rem;
            font-size: 1rem;
        }

        .required {
            color: #FF6B35;
        }

        input, select, textarea {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 1rem;
            font-family: inherit;
            transition: all 0.3s ease;
            background: white;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #4A90E2;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
            transform: translateY(-2px);
        }

        .radio-group {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .radio-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            padding: 0.75rem 1rem;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            transition: all 0.3s ease;
            background: white;
        }

        .radio-item:hover {
            border-color: #4A90E2;
            background: rgba(74, 144, 226, 0.05);
        }

        .radio-item input[type="radio"]:checked + span {
            color: #4A90E2;
            font-weight: 600;
        }

        .file-upload {
            border: 3px dashed #4A90E2;
            border-radius: 15px;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: rgba(74, 144, 226, 0.02);
        }

        .file-upload:hover {
            border-color: #FF6B35;
            background: rgba(255, 107, 53, 0.05);
            transform: translateY(-2px);
        }

        .file-upload-icon {
            font-size: 3rem;
            color: #4A90E2;
            margin-bottom: 1rem;
        }

        .navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 2px solid #e1e5e9;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 10px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-family: inherit;
        }

        .btn-primary {
            background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 107, 53, 0.3);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #4A90E2 0%, #357ABD 100%);
            color: white;
        }

        .btn-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(74, 144, 226, 0.3);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none !important;
        }

        .footer {
            text-align: center;
            color: #666;
            font-size: 0.9rem;
            margin-top: 2rem;
            padding: 1rem;
            background: rgba(74, 144, 226, 0.05);
            border-radius: 10px;
        }

        .footer a {
            color: #4A90E2;
            text-decoration: none;
        }

        .footer a:hover {
            text-decoration: underline;
        }

        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }

            .header h1 {
                font-size: 2rem;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .navigation {
                flex-direction: column;
                gap: 1rem;
            }

            .btn {
                width: 100%;
                justify-content: center;
            }

            .radio-group {
                flex-direction: column;
            }
        }

        .form-step {
            animation: slideIn 0.3s ease-in-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .success-message {
            background: linear-gradient(135deg, #6BCF7F 0%, #4CAF50 100%);
            color: white;
            padding: 2rem;
            border-radius: 15px;
            text-align: center;
            margin: 2rem 0;
        }

        .success-message h2 {
            font-size: 2rem;
            margin-bottom: 1rem;
        }

        .ticket {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            margin: 2rem 0;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 2px dashed #4A90E2;
        }

        .ticket-header {
            text-align: center;
            border-bottom: 2px solid #e1e5e9;
            padding-bottom: 1rem;
            margin-bottom: 1rem;
        }

        .ticket-number {
            font-size: 2rem;
            font-weight: bold;
            color: #FF6B35;
            margin-bottom: 0.5rem;
        }

        .ticket-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin: 1rem 0;
        }

        .info-item {
            padding: 0.5rem;
            border-radius: 8px;
            background: rgba(74, 144, 226, 0.05);
        }

        .info-label {
            font-weight: 600;
            color: #4A90E2;
            font-size: 0.9rem;
        }

        .info-value {
            color: #333;
            font-size: 1rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="logo">BK</div>
            <h1>استمارة تسجيل طفل جديد</h1>
            <p>مركز Bright Kids للحضانة - YADC7069</p>
            <p>حي قرطبة، 46429، ينبع | +966 53 750 6160</p>
        </div>

        <div class="form-container">
            <!-- Progress Bar -->
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>

            <!-- Step Indicator -->
            <div class="step-indicator" id="stepIndicator">
                الخطوة 1 من 8: بيانات الطفل
            </div>

            <!-- Form -->
            <form id="registrationForm">
                <div class="form-step" id="formContent">
                    <div class="form-section">
                        <h2 class="section-title">بيانات الطفل</h2>
                        
                        <div class="form-grid">
                            <div class="form-group">
                                <label for="childName">الاسم الكامل للطفل <span class="required">*</span></label>
                                <input type="text" id="childName" name="childName" required placeholder="أدخل الاسم الكامل">
                            </div>

                            <div class="form-group">
                                <label for="birthDate">تاريخ الميلاد <span class="required">*</span></label>
                                <input type="date" id="birthDate" name="birthDate" required>
                            </div>

                            <div class="form-group">
                                <label for="age">العمر <span class="required">*</span></label>
                                <input type="text" id="age" name="age" required placeholder="مثال: سنتان و 6 أشهر">
                            </div>

                            <div class="form-group">
                                <label>الجنس <span class="required">*</span></label>
                                <div class="radio-group">
                                    <label class="radio-item">
                                        <input type="radio" name="gender" value="ذكر" required>
                                        <span>ذكر</span>
                                    </label>
                                    <label class="radio-item">
                                        <input type="radio" name="gender" value="أنثى" required>
                                        <span>أنثى</span>
                                    </label>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="nationality">الجنسية <span class="required">*</span></label>
                                <input type="text" id="nationality" name="nationality" required placeholder="الجنسية">
                            </div>

                            <div class="form-group">
                                <label for="birthPlace">مكان الميلاد <span class="required">*</span></label>
                                <input type="text" id="birthPlace" name="birthPlace" required placeholder="مكان الميلاد">
                            </div>

                            <div class="form-group full-width">
                                <label>صورة الطفل <span class="required">*</span></label>
                                <div class="file-upload" onclick="document.getElementById('childPhoto').click()">
                                    <div class="file-upload-icon">📷</div>
                                    <p>اضغط لرفع صورة الطفل</p>
                                    <small>يُفضل صورة واضحة وحديثة</small>
                                    <input type="file" id="childPhoto" name="childPhoto" accept="image/*" style="display: none;" required>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Navigation -->
                <div class="navigation" id="navigation">
                    <button type="button" class="btn btn-secondary" id="prevBtn" onclick="prevStep()" disabled>السابق</button>
                    <button type="button" class="btn btn-primary" id="nextBtn" onclick="nextStep()">التالي</button>
                </div>
            </form>

            <!-- Footer -->
            <div class="footer">
                <p>جميع الحقول المميزة بـ (*) مطلوبة</p>
                <p>
                    للمساعدة: +966 53 750 6160 | 
                    <a href="https://www.google.com/maps/dir/?api=1&destination=24.0857962992111%2C38.0875255905884" target="_blank">
                        الموقع على الخريطة
                    </a>
                </p>
            </div>
        </div>
    </div>

    <script>
        let currentStep = 1;
        const totalSteps = 3; // مبسط لثلاث خطوات فقط
        let formData = {};

        const stepNames = [
            'بيانات الطفل',
            'بيانات ولي الأمر', 
            'مراجعة وإرسال'
        ];

        function updateProgress() {
            const progressFill = document.getElementById('progressFill');
            const stepIndicator = document.getElementById('stepIndicator');
            const prevBtn = document.getElementById('prevBtn');
            
            const percentage = (currentStep / totalSteps) * 100;
            progressFill.style.width = percentage + '%';
            
            stepIndicator.textContent = `الخطوة ${currentStep} من ${totalSteps}: ${stepNames[currentStep - 1]}`;
            
            prevBtn.disabled = currentStep === 1;
        }

        function collectFormData() {
            const form = document.getElementById('registrationForm');
            const formDataObj = new FormData(form);
            
            for (let [key, value] of formDataObj.entries()) {
                formData[key] = value;
            }
        }

        function nextStep() {
            if (currentStep < totalSteps) {
                collectFormData();
                currentStep++;
                updateProgress();
                
                if (currentStep === 2) {
                    showStep2();
                } else if (currentStep === 3) {
                    showStep3();
                }
            }
        }

        function prevStep() {
            if (currentStep > 1) {
                currentStep--;
                updateProgress();
                
                if (currentStep === 1) {
                    showStep1();
                } else if (currentStep === 2) {
                    showStep2();
                }
            }
        }

        function showStep1() {
            const formContent = document.getElementById('formContent');
            formContent.innerHTML = `
                <div class="form-section">
                    <h2 class="section-title">بيانات الطفل</h2>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="childName">الاسم الكامل للطفل <span class="required">*</span></label>
                            <input type="text" id="childName" name="childName" required placeholder="أدخل الاسم الكامل" value="${formData.childName || ''}">
                        </div>

                        <div class="form-group">
                            <label for="birthDate">تاريخ الميلاد <span class="required">*</span></label>
                            <input type="date" id="birthDate" name="birthDate" required value="${formData.birthDate || ''}">
                        </div>

                        <div class="form-group">
                            <label for="age">العمر <span class="required">*</span></label>
                            <input type="text" id="age" name="age" required placeholder="مثال: سنتان و 6 أشهر" value="${formData.age || ''}">
                        </div>

                        <div class="form-group">
                            <label>الجنس <span class="required">*</span></label>
                            <div class="radio-group">
                                <label class="radio-item">
                                    <input type="radio" name="gender" value="ذكر" required ${formData.gender === 'ذكر' ? 'checked' : ''}>
                                    <span>ذكر</span>
                                </label>
                                <label class="radio-item">
                                    <input type="radio" name="gender" value="أنثى" required ${formData.gender === 'أنثى' ? 'checked' : ''}>
                                    <span>أنثى</span>
                                </label>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="nationality">الجنسية <span class="required">*</span></label>
                            <input type="text" id="nationality" name="nationality" required placeholder="الجنسية" value="${formData.nationality || ''}">
                        </div>

                        <div class="form-group">
                            <label for="birthPlace">مكان الميلاد <span class="required">*</span></label>
                            <input type="text" id="birthPlace" name="birthPlace" required placeholder="مكان الميلاد" value="${formData.birthPlace || ''}">
                        </div>
                    </div>
                </div>
            `;
            
            updateNavigation();
        }

        function showStep2() {
            const formContent = document.getElementById('formContent');
            formContent.innerHTML = `
                <div class="form-section">
                    <h2 class="section-title">بيانات ولي الأمر</h2>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="parentName">اسم ولي الأمر <span class="required">*</span></label>
                            <input type="text" id="parentName" name="parentName" required placeholder="الاسم الكامل لولي الأمر" value="${formData.parentName || ''}">
                        </div>

                        <div class="form-group">
                            <label for="relationship">صلة القرابة <span class="required">*</span></label>
                            <select id="relationship" name="relationship" required>
                                <option value="">اختر صلة القرابة</option>
                                <option value="الأب" ${formData.relationship === 'الأب' ? 'selected' : ''}>الأب</option>
                                <option value="الأم" ${formData.relationship === 'الأم' ? 'selected' : ''}>الأم</option>
                                <option value="الجد" ${formData.relationship === 'الجد' ? 'selected' : ''}>الجد</option>
                                <option value="الجدة" ${formData.relationship === 'الجدة' ? 'selected' : ''}>الجدة</option>
                                <option value="العم" ${formData.relationship === 'العم' ? 'selected' : ''}>العم</option>
                                <option value="العمة" ${formData.relationship === 'العمة' ? 'selected' : ''}>العمة</option>
                                <option value="الخال" ${formData.relationship === 'الخال' ? 'selected' : ''}>الخال</option>
                                <option value="الخالة" ${formData.relationship === 'الخالة' ? 'selected' : ''}>الخالة</option>
                                <option value="أخرى" ${formData.relationship === 'أخرى' ? 'selected' : ''}>أخرى</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="phoneNumber">رقم الجوال <span class="required">*</span></label>
                            <input type="tel" id="phoneNumber" name="phoneNumber" required placeholder="+966 53 750 6160" value="${formData.phoneNumber || ''}">
                        </div>

                        <div class="form-group">
                            <label for="emergencyPhone">رقم آخر للطوارئ <span class="required">*</span></label>
                            <input type="tel" id="emergencyPhone" name="emergencyPhone" required placeholder="رقم جوال آخر للطوارئ" value="${formData.emergencyPhone || ''}">
                        </div>

                        <div class="form-group">
                            <label for="email">البريد الإلكتروني <span class="required">*</span></label>
                            <input type="email" id="email" name="email" required placeholder="example@email.com" value="${formData.email || ''}">
                        </div>

                        <div class="form-group full-width">
                            <label for="address">العنوان <span class="required">*</span></label>
                            <textarea id="address" name="address" rows="3" required placeholder="العنوان الكامل">${formData.address || ''}</textarea>
                        </div>
                    </div>
                </div>
            `;
            
            updateNavigation();
        }

        function showStep3() {
            collectFormData();
            
            const formContent = document.getElementById('formContent');
            formContent.innerHTML = `
                <div class="form-section">
                    <h2 class="section-title">مراجعة البيانات</h2>
                    
                    <div class="ticket">
                        <div class="ticket-header">
                            <div class="ticket-number">رقم الطلب: BK-${Date.now().toString().slice(-6)}</div>
                            <p>تاريخ التقديم: ${new Date().toLocaleDateString('ar-SA')}</p>
                        </div>
                        
                        <div class="ticket-info">
                            <div class="info-item">
                                <div class="info-label">اسم الطفل</div>
                                <div class="info-value">${formData.childName || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">تاريخ الميلاد</div>
                                <div class="info-value">${formData.birthDate || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">العمر</div>
                                <div class="info-value">${formData.age || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">الجنس</div>
                                <div class="info-value">${formData.gender || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">اسم ولي الأمر</div>
                                <div class="info-value">${formData.parentName || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">صلة القرابة</div>
                                <div class="info-value">${formData.relationship || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">رقم الجوال</div>
                                <div class="info-value">${formData.phoneNumber || 'غير محدد'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">البريد الإلكتروني</div>
                                <div class="info-value">${formData.email || 'غير محدد'}</div>
                            </div>
                        </div>
                        
                        <div style="margin-top: 1.5rem; padding-top: 1.5rem; border-top: 2px solid #e1e5e9;">
                            <p style="text-align: center; color: #666; font-size: 0.9rem;">
                                يرجى مراجعة البيانات والتأكد من صحتها قبل الإرسال
                            </p>
                        </div>
                    </div>
                </div>
            `;
            
            updateNavigation();
        }

        function updateNavigation() {
            const navigation = document.getElementById('navigation');
            
            if (currentStep === totalSteps) {
                navigation.innerHTML = `
                    <button type="button" class="btn btn-secondary" onclick="prevStep()">السابق</button>
                    <button type="button" class="btn btn-primary" onclick="submitForm()">إرسال الطلب</button>
                `;
            } else {
                navigation.innerHTML = `
                    <button type="button" class="btn btn-secondary" id="prevBtn" onclick="prevStep()" ${currentStep === 1 ? 'disabled' : ''}>السابق</button>
                    <button type="button" class="btn btn-primary" id="nextBtn" onclick="nextStep()">التالي</button>
                `;
            }
        }

        function submitForm() {
            collectFormData();
            
            // إنشاء رقم تسجيل فريد
            const registrationNumber = 'BK-' + Date.now().toString().slice(-6);
            
            // عرض رسالة النجاح
            const formContent = document.getElementById('formContent');
            formContent.innerHTML = `
                <div class="success-message">
                    <h2>🎉 تم إرسال الطلب بنجاح!</h2>
                    <p>رقم التسجيل: <strong>${registrationNumber}</strong></p>
                    <p>سيتم التواصل معكم خلال 24 ساعة</p>
                </div>
                
                <div class="ticket">
                    <div class="ticket-header">
                        <div class="ticket-number">${registrationNumber}</div>
                        <p>كوبون تسجيل طفل جديد</p>
                        <p>تاريخ التقديم: ${new Date().toLocaleDateString('ar-SA')}</p>
                    </div>
                    
                    <div class="ticket-info">
                        <div class="info-item">
                            <div class="info-label">اسم الطفل</div>
                            <div class="info-value">${formData.childName}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">اسم ولي الأمر</div>
                            <div class="info-value">${formData.parentName}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">رقم الجوال</div>
                            <div class="info-value">${formData.phoneNumber}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">حالة الطلب</div>
                            <div class="info-value" style="color: #FF6B35; font-weight: bold;">قيد المراجعة</div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 1.5rem; padding-top: 1.5rem; border-top: 2px solid #e1e5e9; text-align: center;">
                        <p style="color: #4A90E2; font-weight: 600;">مركز Bright Kids للحضانة</p>
                        <p style="color: #666; font-size: 0.9rem;">حي قرطبة، 46429، ينبع | +966 53 750 6160</p>
                        <p style="color: #666; font-size: 0.9rem;">YADC7069</p>
                    </div>
                </div>
            `;
            
            // إخفاء أزرار التنقل
            document.getElementById('navigation').style.display = 'none';
            
            // إخفاء شريط التقدم ومؤشر الخطوة
            document.querySelector('.progress-bar').style.display = 'none';
            document.getElementById('stepIndicator').style.display = 'none';
            
            // طباعة البيانات في وحدة التحكم
            console.log('تم إرسال طلب التسجيل:', {
                registrationNumber,
                formData,
                timestamp: new Date().toISOString()
            });
        }

        // File upload handling
        document.addEventListener('change', function(e) {
            if (e.target.type === 'file') {
                const file = e.target.files[0];
                if (file) {
                    const fileUpload = e.target.parentElement;
                    fileUpload.innerHTML = `
                        <div class="file-upload-icon">✅</div>
                        <p>تم رفع الملف: ${file.name}</p>
                        <small>اضغط لتغيير الملف</small>
                        <input type="file" id="${e.target.id}" name="${e.target.name}" accept="${e.target.accept}" style="display: none;" required>
                    `;
                    fileUpload.style.borderColor = '#6BCF7F';
                    fileUpload.style.background = 'rgba(108, 207, 127, 0.1)';
                    
                    // إعادة ربط حدث النقر
                    fileUpload.onclick = function() {
                        document.getElementById(e.target.id).click();
                    };
                }
            }
        });

        // Initialize
        updateProgress();
    </script>
</body>
</html>


import React, { useState, useEffect } from 'react';

const RegistrationRequests = () => {
  const [registrations, setRegistrations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState({});
  const [selectedRegistration, setSelectedRegistration] = useState(null);
  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    fetchRegistrations();
    fetchStats();
  }, []);

  const fetchRegistrations = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/registration/list');
      const data = await response.json();
      if (data.success) {
        setRegistrations(data.registrations);
      }
    } catch (error) {
      console.error('خطأ في جلب طلبات التسجيل:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/registration/stats');
      const data = await response.json();
      if (data.success) {
        setStats(data.stats);
      }
    } catch (error) {
      console.error('خطأ في جلب الإحصائيات:', error);
    }
  };

  const updateRegistrationStatus = async (registrationNumber, newStatus, notes = '') => {
    try {
      const response = await fetch(`http://localhost:5000/api/registration/${registrationNumber}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          status: newStatus,
          notes: notes
        })
      });
      
      const data = await response.json();
      if (data.success) {
        fetchRegistrations();
        fetchStats();
        setShowModal(false);
        alert('تم تحديث حالة الطلب بنجاح');
      } else {
        alert('حدث خطأ في تحديث الحالة');
      }
    } catch (error) {
      console.error('خطأ في تحديث الحالة:', error);
      alert('حدث خطأ في تحديث الحالة');
    }
  };

  const getStatusBadge = (status) => {
    const statusConfig = {
      'pending_review': { label: 'قيد المراجعة', color: 'bg-yellow-100 text-yellow-800' },
      'approved': { label: 'مقبول', color: 'bg-green-100 text-green-800' },
      'rejected': { label: 'مرفوض', color: 'bg-red-100 text-red-800' },
      'contacted': { label: 'تم التواصل', color: 'bg-blue-100 text-blue-800' }
    };
    
    const config = statusConfig[status] || { label: status, color: 'bg-gray-100 text-gray-800' };
    
    return (
      <span className={`px-2 py-1 rounded-full text-xs font-medium ${config.color}`}>
        {config.label}
      </span>
    );
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ar-SA', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* إحصائيات سريعة */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                <span className="text-blue-600 font-bold">📋</span>
              </div>
            </div>
            <div className="mr-4">
              <p className="text-sm font-medium text-gray-600">إجمالي الطلبات</p>
              <p className="text-2xl font-bold text-gray-900">{stats.total || 0}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center">
                <span className="text-yellow-600 font-bold">⏳</span>
              </div>
            </div>
            <div className="mr-4">
              <p className="text-sm font-medium text-gray-600">قيد المراجعة</p>
              <p className="text-2xl font-bold text-gray-900">{stats.pending || 0}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                <span className="text-green-600 font-bold">✅</span>
              </div>
            </div>
            <div className="mr-4">
              <p className="text-sm font-medium text-gray-600">مقبولة</p>
              <p className="text-2xl font-bold text-gray-900">{stats.approved || 0}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center">
                <span className="text-orange-600 font-bold">📅</span>
              </div>
            </div>
            <div className="mr-4">
              <p className="text-sm font-medium text-gray-600">اليوم</p>
              <p className="text-2xl font-bold text-gray-900">{stats.today || 0}</p>
            </div>
          </div>
        </div>
      </div>

      {/* قائمة طلبات التسجيل */}
      <div className="bg-white shadow rounded-lg">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-900">طلبات التسجيل الجديدة</h3>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  رقم الطلب
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  اسم الطفل
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ولي الأمر
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  رقم الجوال
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  تاريخ التقديم
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  الحالة
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  الإجراءات
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {registrations.map((registration) => (
                <tr key={registration.registration_number} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {registration.registration_number}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {registration.child_data?.name || 'غير محدد'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {registration.parent_data?.name || 'غير محدد'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {registration.parent_data?.phone || 'غير محدد'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {formatDate(registration.submission_date)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {getStatusBadge(registration.status)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button
                      onClick={() => {
                        setSelectedRegistration(registration);
                        setShowModal(true);
                      }}
                      className="text-blue-600 hover:text-blue-900 ml-4"
                    >
                      عرض التفاصيل
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          
          {registrations.length === 0 && (
            <div className="text-center py-12">
              <div className="text-gray-500">
                <p className="text-lg font-medium">لا توجد طلبات تسجيل</p>
                <p className="text-sm">سيتم عرض طلبات التسجيل الجديدة هنا</p>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* نافذة تفاصيل الطلب */}
      {showModal && selectedRegistration && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-medium text-gray-900">
                  تفاصيل طلب التسجيل - {selectedRegistration.registration_number}
                </h3>
                <button
                  onClick={() => setShowModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  ✕
                </button>
              </div>
              
              <div className="space-y-6">
                {/* بيانات الطفل */}
                <div>
                  <h4 className="text-md font-medium text-gray-900 mb-3">بيانات الطفل</h4>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700">الاسم</label>
                      <p className="mt-1 text-sm text-gray-900">{selectedRegistration.child_data?.name}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">تاريخ الميلاد</label>
                      <p className="mt-1 text-sm text-gray-900">{selectedRegistration.child_data?.birth_date}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">العمر</label>
                      <p className="mt-1 text-sm text-gray-900">{selectedRegistration.child_data?.age}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">الجنس</label>
                      <p className="mt-1 text-sm text-gray-900">{selectedRegistration.child_data?.gender}</p>
                    </div>
                  </div>
                </div>

                {/* بيانات ولي الأمر */}
                <div>
                  <h4 className="text-md font-medium text-gray-900 mb-3">بيانات ولي الأمر</h4>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700">الاسم</label>
                      <p className="mt-1 text-sm text-gray-900">{selectedRegistration.parent_data?.name}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">صلة القرابة</label>
                      <p className="mt-1 text-sm text-gray-900">{selectedRegistration.parent_data?.relationship}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">رقم الجوال</label>
                      <p className="mt-1 text-sm text-gray-900">{selectedRegistration.parent_data?.phone}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">البريد الإلكتروني</label>
                      <p className="mt-1 text-sm text-gray-900">{selectedRegistration.parent_data?.email}</p>
                    </div>
                    <div className="col-span-2">
                      <label className="block text-sm font-medium text-gray-700">العنوان</label>
                      <p className="mt-1 text-sm text-gray-900">{selectedRegistration.parent_data?.address}</p>
                    </div>
                  </div>
                </div>

                {/* الإجراءات */}
                <div className="flex justify-end space-x-3 pt-4 border-t">
                  <button
                    onClick={() => updateRegistrationStatus(selectedRegistration.registration_number, 'rejected')}
                    className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
                  >
                    رفض
                  </button>
                  <button
                    onClick={() => updateRegistrationStatus(selectedRegistration.registration_number, 'contacted')}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                  >
                    تم التواصل
                  </button>
                  <button
                    onClick={() => updateRegistrationStatus(selectedRegistration.registration_number, 'approved')}
                    className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
                  >
                    قبول
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RegistrationRequests;


import React, { useState } from 'react';
// import brightKidsLogo from '../assets/bright-kids-logo-white.png';
import './RegistrationForm.css';

const RegistrationForm = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    // بيانات الطفل
    childName: '',
    birthDate: '',
    age: '',
    gender: '',
    nationality: '',
    birthPlace: '',
    childPhoto: null,
    
    // بيانات ولي الأمر
    parentName: '',
    relationship: '',
    phoneNumber: '',
    emergencyPhone: '',
    email: '',
    address: '',
    
    // معلومات التغذية
    feedingCount: '',
    feedingTimes: '',
    milkType: '',
    milkBrand: '',
    breakfast: '',
    lunch: '',
    dinner: '',
    snacks: '',
    
    // الحالة الصحية
    hasAllergies: false,
    allergiesDetails: '',
    medications: '',
    emergencyInstructions: '',
    
    // خيارات الاشتراك
    transportService: false,
    mealService: false,
    
    // تفويض الاستلام
    authorizedPersons: [
      { name: '', relationship: '', phone: '' },
      { name: '', relationship: '', phone: '' },
      { name: '', relationship: '', phone: '' }
    ],
    
    // المستندات
    documents: {
      familyCard: null,
      childPhotos: null,
      birthCertificate: null,
      vaccinations: null,
      parentId: null
    }
  });

  const totalSteps = 8;

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleAuthorizedPersonChange = (index, field, value) => {
    const updatedPersons = [...formData.authorizedPersons];
    updatedPersons[index][field] = value;
    setFormData(prev => ({
      ...prev,
      authorizedPersons: updatedPersons
    }));
  };

  const handleFileUpload = (field, file) => {
    if (field.includes('.')) {
      const [parent, child] = field.split('.');
      setFormData(prev => ({
        ...prev,
        [parent]: {
          ...prev[parent],
          [child]: file
        }
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [field]: file
      }));
    }
  };

  const nextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmit = () => {
    console.log('Form submitted:', formData);
    // هنا سيتم إرسال البيانات إلى الخادم
    alert('تم إرسال طلب التسجيل بنجاح!');
  };

  const renderProgressBar = () => (
    <div className="w-full bg-gray-200 rounded-full h-3 mb-8">
      <div 
        className="bg-gradient-to-r from-bright-orange to-bright-blue h-3 rounded-full progress-bar"
        style={{ width: `${(currentStep / totalSteps) * 100}%` }}
      ></div>
    </div>
  );

  const renderStep1 = () => (
    <div className="form-step">
      <h2 className="text-2xl font-bold text-bright-blue mb-6">بيانات الطفل</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2">
            الاسم الكامل للطفل *
          </label>
          <input
            type="text"
            value={formData.childName}
            onChange={(e) => handleInputChange('childName', e.target.value)}
            className="input-field w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-bright-blue"
            placeholder="أدخل الاسم الكامل"
            required
          />
        </div>

        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2">
            تاريخ الميلاد *
          </label>
          <input
            type="date"
            value={formData.birthDate}
            onChange={(e) => handleInputChange('birthDate', e.target.value)}
            className="input-field w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-bright-blue"
            required
          />
        </div>

        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2">
            العمر *
          </label>
          <input
            type="text"
            value={formData.age}
            onChange={(e) => handleInputChange('age', e.target.value)}
            className="input-field w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-bright-blue"
            placeholder="مثال: سنتان و 6 أشهر"
            required
          />
        </div>

        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2">
            الجنس *
          </label>
          <div className="flex gap-4">
            <label className="flex items-center">
              <input
                type="radio"
                name="gender"
                value="ذكر"
                checked={formData.gender === 'ذكر'}
                onChange={(e) => handleInputChange('gender', e.target.value)}
                className="ml-2"
              />
              ذكر
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                name="gender"
                value="أنثى"
                checked={formData.gender === 'أنثى'}
                onChange={(e) => handleInputChange('gender', e.target.value)}
                className="ml-2"
              />
              أنثى
            </label>
          </div>
        </div>

        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2">
            الجنسية *
          </label>
          <input
            type="text"
            value={formData.nationality}
            onChange={(e) => handleInputChange('nationality', e.target.value)}
            className="input-field w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-bright-blue"
            placeholder="الجنسية"
            required
          />
        </div>

        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2">
            مكان الميلاد *
          </label>
          <input
            type="text"
            value={formData.birthPlace}
            onChange={(e) => handleInputChange('birthPlace', e.target.value)}
            className="input-field w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-bright-blue"
            placeholder="مكان الميلاد"
            required
          />
        </div>
      </div>

      <div className="mt-6">
        <label className="block text-gray-700 text-sm font-bold mb-2">
          صورة الطفل *
        </label>
        <div className="file-upload-area border-2 border-dashed border-bright-blue rounded-lg p-6 text-center">
          <input
            type="file"
            accept="image/*"
            onChange={(e) => handleFileUpload('childPhoto', e.target.files[0])}
            className="hidden"
            id="childPhoto"
          />
          <label htmlFor="childPhoto" className="cursor-pointer">
            <div className="text-bright-blue text-lg mb-2">📷</div>
            <p className="text-gray-600">اضغط لرفع صورة الطفل</p>
            {formData.childPhoto && (
              <p className="text-green-600 mt-2">تم رفع الصورة: {formData.childPhoto.name}</p>
            )}
          </label>
        </div>
      </div>
    </div>
  );

  const renderStep2 = () => (
    <div className="form-step">
      <h2 className="text-2xl font-bold text-bright-blue mb-6">بيانات ولي الأمر</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2">
            اسم ولي الأمر *
          </label>
          <input
            type="text"
            value={formData.parentName}
            onChange={(e) => handleInputChange('parentName', e.target.value)}
            className="input-field w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-bright-blue"
            placeholder="الاسم الكامل لولي الأمر"
            required
          />
        </div>

        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2">
            صلة القرابة *
          </label>
          <select
            value={formData.relationship}
            onChange={(e) => handleInputChange('relationship', e.target.value)}
            className="input-field w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-bright-blue"
            required
          >
            <option value="">اختر صلة القرابة</option>
            <option value="الأب">الأب</option>
            <option value="الأم">الأم</option>
            <option value="الجد">الجد</option>
            <option value="الجدة">الجدة</option>
            <option value="العم">العم</option>
            <option value="العمة">العمة</option>
            <option value="الخال">الخال</option>
            <option value="الخالة">الخالة</option>
            <option value="أخرى">أخرى</option>
          </select>
        </div>

        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2">
            رقم الجوال *
          </label>
          <input
            type="tel"
            value={formData.phoneNumber}
            onChange={(e) => handleInputChange('phoneNumber', e.target.value)}
            className="input-field w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-bright-blue"
            placeholder="+966 53 750 6160"
            required
          />
        </div>

        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2">
            رقم آخر للطوارئ *
          </label>
          <input
            type="tel"
            value={formData.emergencyPhone}
            onChange={(e) => handleInputChange('emergencyPhone', e.target.value)}
            className="input-field w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-bright-blue"
            placeholder="رقم جوال آخر للطوارئ"
            required
          />
        </div>

        <div>
          <label className="block text-gray-700 text-sm font-bold mb-2">
            البريد الإلكتروني *
          </label>
          <input
            type="email"
            value={formData.email}
            onChange={(e) => handleInputChange('email', e.target.value)}
            className="input-field w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-bright-blue"
            placeholder="example@email.com"
            required
          />
        </div>

        <div className="md:col-span-2">
          <label className="block text-gray-700 text-sm font-bold mb-2">
            العنوان *
          </label>
          <textarea
            value={formData.address}
            onChange={(e) => handleInputChange('address', e.target.value)}
            className="input-field w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-bright-blue"
            placeholder="العنوان الكامل"
            rows="3"
            required
          />
        </div>
      </div>
    </div>
  );

  const renderNavigationButtons = () => (
    <div className="flex justify-between mt-8">
      <button
        onClick={prevStep}
        disabled={currentStep === 1}
        className={`px-6 py-3 rounded-lg font-semibold ${
          currentStep === 1
            ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
            : 'btn-secondary text-white hover:shadow-lg'
        }`}
      >
        السابق
      </button>

      {currentStep === totalSteps ? (
        <button
          onClick={handleSubmit}
          className="btn-primary text-white px-8 py-3 rounded-lg font-semibold hover:shadow-lg"
        >
          إرسال الطلب
        </button>
      ) : (
        <button
          onClick={nextStep}
          className="btn-primary text-white px-6 py-3 rounded-lg font-semibold hover:shadow-lg"
        >
          التالي
        </button>
      )}
    </div>
  );

  const renderCurrentStep = () => {
    switch (currentStep) {
      case 1:
        return renderStep1();
      case 2:
        return renderStep2();
      default:
        return renderStep1();
    }
  };

  return (
    <div className="min-h-screen py-8 px-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="mx-auto mb-4 h-24 w-24 bg-gradient-to-r from-bright-orange to-bright-blue rounded-full flex items-center justify-center">
            <span className="text-white text-2xl font-bold">BK</span>
          </div>
          <h1 className="text-3xl font-bold text-bright-blue mb-2">
            استمارة تسجيل طفل جديد
          </h1>
          <p className="text-gray-600">
            مركز Bright Kids للحضانة - YADC7069
          </p>
          <p className="text-gray-600">
            حي قرطبة، 46429، ينبع | +966 53 750 6160
          </p>
        </div>

        {/* Progress Bar */}
        {renderProgressBar()}

        {/* Step Indicator */}
        <div className="flex justify-center mb-8">
          <div className="text-center">
            <span className="text-lg font-semibold text-bright-blue">
              الخطوة {currentStep} من {totalSteps}
            </span>
          </div>
        </div>

        {/* Form Content */}
        <div className="card rounded-xl shadow-xl p-8 mb-8">
          {renderCurrentStep()}
          {renderNavigationButtons()}
        </div>

        {/* Footer */}
        <div className="text-center text-gray-500 text-sm">
          <p>جميع الحقول المميزة بـ (*) مطلوبة</p>
          <p className="mt-2">
            للمساعدة: +966 53 750 6160 | 
            <a 
              href="https://www.google.com/maps/dir/?api=1&destination=24.0857962992111%2C38.0875255905884"
              target="_blank"
              rel="noopener noreferrer"
              className="text-bright-blue hover:underline mr-2"
            >
              الموقع على الخريطة
            </a>
          </p>
        </div>
      </div>
    </div>
  );
};

export default RegistrationForm;


from flask import Blueprint, request, jsonify, current_app
from src.models.user import db, User, Child, DailyUpdate
from src.routes.auth import token_required, admin_required
from datetime import datetime, date
from sqlalchemy import and_, func

daily_updates_bp = Blueprint('daily_updates', __name__)

@daily_updates_bp.route('/add', methods=['POST'])
@token_required
def add_daily_update(current_user):
    """إضافة تحديث يومي (الموظفين والإدارة فقط)"""
    try:
        if current_user.role not in ['staff', 'admin']:
            return jsonify({'message': 'Only staff can add daily updates'}), 403
        
        data = request.get_json()
        
        # التحقق من البيانات المطلوبة
        if not data.get('child_id'):
            return jsonify({'message': 'Child ID is required'}), 400
        
        child = Child.query.get(data['child_id'])
        
        if not child:
            return jsonify({'message': 'Child not found'}), 404
        
        if not child.is_approved:
            return jsonify({'message': 'Child is not approved yet'}), 400
        
        # إنشاء التحديث اليومي
        daily_update = DailyUpdate(
            child_id=data['child_id'],
            staff_id=current_user.id,
            note=data.get('note'),
            photo_url=data.get('photo_url'),
            video_url=data.get('video_url'),
            activity_type=data.get('activity_type')  # أكل، نوم، لعب، تعلم
        )
        
        db.session.add(daily_update)
        db.session.commit()
        
        # إرسال إشعار لولي الأمر (TODO: تنفيذ الإشعارات)
        
        return jsonify({
            'message': 'Daily update added successfully',
            'update': daily_update.to_dict(),
            'child': child.to_dict()
        }), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': f'Failed to add daily update: {str(e)}'}), 500

@daily_updates_bp.route('/child/<int:child_id>/today', methods=['GET'])
@token_required
def get_child_updates_today(current_user, child_id):
    """الحصول على تحديثات طفل محدد لليوم الحالي"""
    try:
        child = Child.query.get(child_id)
        
        if not child:
            return jsonify({'message': 'Child not found'}), 404
        
        # التحقق من الصلاحيات
        if current_user.role == 'parent' and child.parent_id != current_user.id:
            return jsonify({'message': 'Access denied'}), 403
        
        # الحصول على تحديثات اليوم
        today = date.today()
        updates = DailyUpdate.query.filter(
            and_(
                DailyUpdate.child_id == child_id,
                func.date(DailyUpdate.created_at) == today
            )
        ).order_by(DailyUpdate.created_at.desc()).all()
        
        # إضافة معلومات الموظف لكل تحديث
        updates_with_staff = []
        for update in updates:
            update_dict = update.to_dict()
            update_dict['staff'] = update.staff_member.to_dict()
            updates_with_staff.append(update_dict)
        
        return jsonify({
            'child': child.to_dict(),
            'date': today.isoformat(),
            'updates': updates_with_staff
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Failed to get daily updates: {str(e)}'}), 500

@daily_updates_bp.route('/child/<int:child_id>/history', methods=['GET'])
@token_required
def get_child_updates_history(current_user, child_id):
    """الحصول على تاريخ تحديثات طفل محدد"""
    try:
        child = Child.query.get(child_id)
        
        if not child:
            return jsonify({'message': 'Child not found'}), 404
        
        # التحقق من الصلاحيات
        if current_user.role == 'parent' and child.parent_id != current_user.id:
            return jsonify({'message': 'Access denied'}), 403
        
        # الحصول على معاملات الاستعلام
        days = request.args.get('days', 7, type=int)  # آخر 7 أيام افتراضياً
        activity_type = request.args.get('activity_type')  # تصفية حسب نوع النشاط
        
        # بناء الاستعلام
        query = DailyUpdate.query.filter_by(child_id=child_id)
        
        if activity_type:
            query = query.filter_by(activity_type=activity_type)
        
        # الحصول على التحديثات
        updates = query.order_by(DailyUpdate.created_at.desc())\
            .limit(days * 10).all()  # تقدير 10 تحديثات كحد أقصى في اليوم
        
        # تجميع البيانات حسب التاريخ
        daily_updates = {}
        
        for update in updates:
            update_date = update.created_at.date().isoformat()
            
            if update_date not in daily_updates:
                daily_updates[update_date] = {
                    'date': update_date,
                    'updates': []
                }
            
            update_dict = update.to_dict()
            update_dict['staff'] = update.staff_member.to_dict()
            daily_updates[update_date]['updates'].append(update_dict)
        
        # ترتيب البيانات حسب التاريخ
        sorted_updates = sorted(daily_updates.values(), 
                              key=lambda x: x['date'], reverse=True)
        
        return jsonify({
            'child': child.to_dict(),
            'updates_history': sorted_updates
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Failed to get updates history: {str(e)}'}), 500

@daily_updates_bp.route('/my-children/today', methods=['GET'])
@token_required
def get_my_children_updates_today(current_user):
    """الحصول على تحديثات جميع أطفال ولي الأمر لليوم الحالي"""
    try:
        if current_user.role != 'parent':
            return jsonify({'message': 'Only parents can view their children updates'}), 403
        
        # الحصول على أطفال ولي الأمر
        children = Child.query.filter_by(
            parent_id=current_user.id, 
            is_approved=True, 
            is_active=True
        ).all()
        
        today = date.today()
        children_updates = []
        
        for child in children:
            # الحصول على تحديثات اليوم لهذا الطفل
            updates = DailyUpdate.query.filter(
                and_(
                    DailyUpdate.child_id == child.id,
                    func.date(DailyUpdate.created_at) == today
                )
            ).order_by(DailyUpdate.created_at.desc()).all()
            
            # إضافة معلومات الموظف لكل تحديث
            updates_with_staff = []
            for update in updates:
                update_dict = update.to_dict()
                update_dict['staff'] = update.staff_member.to_dict()
                updates_with_staff.append(update_dict)
            
            children_updates.append({
                'child': child.to_dict(),
                'updates': updates_with_staff,
                'updates_count': len(updates_with_staff)
            })
        
        return jsonify({
            'date': today.isoformat(),
            'children_updates': children_updates
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Failed to get children updates: {str(e)}'}), 500

@daily_updates_bp.route('/today', methods=['GET'])
@token_required
def get_all_updates_today(current_user):
    """الحصول على جميع التحديثات اليومية (الموظفين والإدارة)"""
    try:
        if current_user.role not in ['staff', 'admin']:
            return jsonify({'message': 'Access denied'}), 403
        
        today = date.today()
        
        # الحصول على جميع التحديثات اليوم
        updates = DailyUpdate.query.filter(
            func.date(DailyUpdate.created_at) == today
        ).order_by(DailyUpdate.created_at.desc()).all()
        
        # إضافة معلومات الطفل والموظف لكل تحديث
        updates_with_details = []
        for update in updates:
            update_dict = update.to_dict()
            update_dict['child'] = update.child.to_dict()
            update_dict['staff'] = update.staff_member.to_dict()
            updates_with_details.append(update_dict)
        
        # إحصائيات سريعة
        total_updates = len(updates_with_details)
        activity_types = {}
        
        for update in updates_with_details:
            activity_type = update.get('activity_type', 'غير محدد')
            activity_types[activity_type] = activity_types.get(activity_type, 0) + 1
        
        return jsonify({
            'date': today.isoformat(),
            'summary': {
                'total_updates': total_updates,
                'activity_breakdown': activity_types
            },
            'updates': updates_with_details
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Failed to get today updates: {str(e)}'}), 500

@daily_updates_bp.route('/<int:update_id>', methods=['PUT'])
@token_required
def update_daily_update(current_user, update_id):
    """تحديث تحديث يومي (الموظف الذي أنشأه أو الإدارة فقط)"""
    try:
        daily_update = DailyUpdate.query.get(update_id)
        
        if not daily_update:
            return jsonify({'message': 'Update not found'}), 404
        
        # التحقق من الصلاحيات
        if current_user.role == 'staff' and daily_update.staff_id != current_user.id:
            return jsonify({'message': 'You can only edit your own updates'}), 403
        elif current_user.role not in ['staff', 'admin']:
            return jsonify({'message': 'Access denied'}), 403
        
        data = request.get_json()
        
        # تحديث البيانات المسموحة
        if data.get('note') is not None:
            daily_update.note = data['note']
        if data.get('photo_url') is not None:
            daily_update.photo_url = data['photo_url']
        if data.get('video_url') is not None:
            daily_update.video_url = data['video_url']
        if data.get('activity_type') is not None:
            daily_update.activity_type = data['activity_type']
        
        db.session.commit()
        
        return jsonify({
            'message': 'Daily update updated successfully',
            'update': daily_update.to_dict()
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': f'Failed to update daily update: {str(e)}'}), 500

@daily_updates_bp.route('/<int:update_id>', methods=['DELETE'])
@token_required
def delete_daily_update(current_user, update_id):
    """حذف تحديث يومي (الموظف الذي أنشأه أو الإدارة فقط)"""
    try:
        daily_update = DailyUpdate.query.get(update_id)
        
        if not daily_update:
            return jsonify({'message': 'Update not found'}), 404
        
        # التحقق من الصلاحيات
        if current_user.role == 'staff' and daily_update.staff_id != current_user.id:
            return jsonify({'message': 'You can only delete your own updates'}), 403
        elif current_user.role not in ['staff', 'admin']:
            return jsonify({'message': 'Access denied'}), 403
        
        db.session.delete(daily_update)
        db.session.commit()
        
        return jsonify({
            'message': 'Daily update deleted successfully'
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': f'Failed to delete daily update: {str(e)}'}), 500

@daily_updates_bp.route('/activity-types', methods=['GET'])
@token_required
def get_activity_types(current_user):
    """الحصول على قائمة أنواع الأنشطة المتاحة"""
    activity_types = [
        {'value': 'أكل', 'label': 'وجبة طعام', 'icon': '🍽️'},
        {'value': 'نوم', 'label': 'وقت النوم', 'icon': '😴'},
        {'value': 'لعب', 'label': 'وقت اللعب', 'icon': '🎮'},
        {'value': 'تعلم', 'label': 'نشاط تعليمي', 'icon': '📚'},
        {'value': 'رياضة', 'label': 'نشاط رياضي', 'icon': '⚽'},
        {'value': 'فن', 'label': 'نشاط فني', 'icon': '🎨'},
        {'value': 'موسيقى', 'label': 'نشاط موسيقي', 'icon': '🎵'},
        {'value': 'طبي', 'label': 'رعاية طبية', 'icon': '🏥'},
        {'value': 'أخرى', 'label': 'أنشطة أخرى', 'icon': '📝'}
    ]
    
    return jsonify({
        'activity_types': activity_types
    }), 200


from flask import Blueprint, request, jsonify
from datetime import datetime
import uuid
import os
from werkzeug.utils import secure_filename

registration_bp = Blueprint('registration', __name__)

# مجلد لحفظ الملفات المرفوعة
UPLOAD_FOLDER = 'uploads/registrations'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'pdf', 'doc', 'docx'}

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def ensure_upload_folder():
    """التأكد من وجود مجلد الرفع"""
    if not os.path.exists(UPLOAD_FOLDER):
        os.makedirs(UPLOAD_FOLDER)

@registration_bp.route('/api/registration/submit', methods=['POST'])
def submit_registration():
    """استقبال طلب تسجيل طفل جديد"""
    try:
        ensure_upload_folder()
        
        # إنشاء رقم تسجيل فريد
        registration_number = f"BK-{str(uuid.uuid4())[:6].upper()}"
        
        # استخراج البيانات من النموذج
        data = {}
        
        # بيانات الطفل
        data['child_name'] = request.form.get('childName', '')
        data['birth_date'] = request.form.get('birthDate', '')
        data['age'] = request.form.get('age', '')
        data['gender'] = request.form.get('gender', '')
        data['nationality'] = request.form.get('nationality', '')
        data['birth_place'] = request.form.get('birthPlace', '')
        
        # بيانات ولي الأمر
        data['parent_name'] = request.form.get('parentName', '')
        data['relationship'] = request.form.get('relationship', '')
        data['phone_number'] = request.form.get('phoneNumber', '')
        data['emergency_phone'] = request.form.get('emergencyPhone', '')
        data['email'] = request.form.get('email', '')
        data['address'] = request.form.get('address', '')
        
        # معالجة الملفات المرفوعة
        uploaded_files = []
        for file_key in request.files:
            file = request.files[file_key]
            if file and file.filename != '' and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                # إضافة timestamp لتجنب تضارب الأسماء
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                filename = f"{registration_number}_{timestamp}_{filename}"
                file_path = os.path.join(UPLOAD_FOLDER, filename)
                file.save(file_path)
                uploaded_files.append({
                    'original_name': file.filename,
                    'saved_name': filename,
                    'file_path': file_path,
                    'file_type': file_key
                })
        
        # إنشاء سجل التسجيل
        registration_record = {
            'registration_number': registration_number,
            'submission_date': datetime.now().isoformat(),
            'status': 'pending_review',  # قيد المراجعة
            'child_data': {
                'name': data['child_name'],
                'birth_date': data['birth_date'],
                'age': data['age'],
                'gender': data['gender'],
                'nationality': data['nationality'],
                'birth_place': data['birth_place']
            },
            'parent_data': {
                'name': data['parent_name'],
                'relationship': data['relationship'],
                'phone': data['phone_number'],
                'emergency_phone': data['emergency_phone'],
                'email': data['email'],
                'address': data['address']
            },
            'uploaded_files': uploaded_files,
            'created_at': datetime.now().isoformat(),
            'updated_at': datetime.now().isoformat()
        }
        
        # حفظ السجل في ملف JSON مؤقت (يمكن استبداله بقاعدة بيانات لاحقاً)
        import json
        registrations_file = 'data/registrations.json'
        
        # التأكد من وجود مجلد البيانات
        if not os.path.exists('data'):
            os.makedirs('data')
        
        # قراءة السجلات الموجودة أو إنشاء قائمة جديدة
        registrations = []
        if os.path.exists(registrations_file):
            try:
                with open(registrations_file, 'r', encoding='utf-8') as f:
                    registrations = json.load(f)
            except:
                registrations = []
        
        # إضافة السجل الجديد
        registrations.append(registration_record)
        
        # حفظ السجلات المحدثة
        with open(registrations_file, 'w', encoding='utf-8') as f:
            json.dump(registrations, f, ensure_ascii=False, indent=2)
        
        # إرسال استجابة النجاح
        return jsonify({
            'success': True,
            'message': 'تم إرسال طلب التسجيل بنجاح',
            'registration_number': registration_number,
            'status': 'pending_review',
            'submission_date': registration_record['submission_date'],
            'ticket_data': {
                'registration_number': registration_number,
                'child_name': data['child_name'],
                'parent_name': data['parent_name'],
                'phone': data['phone_number'],
                'email': data['email'],
                'submission_date': datetime.now().strftime('%Y-%m-%d'),
                'status': 'قيد المراجعة',
                'nursery_info': {
                    'name': 'مركز Bright Kids للحضانة',
                    'license': 'YADC7069',
                    'address': 'حي قرطبة، 46429، ينبع',
                    'phone': '+966 53 750 6160'
                }
            }
        }), 200
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'حدث خطأ أثناء معالجة الطلب: {str(e)}'
        }), 500

@registration_bp.route('/api/registration/list', methods=['GET'])
def list_registrations():
    """عرض قائمة طلبات التسجيل"""
    try:
        import json
        registrations_file = 'data/registrations.json'
        
        if not os.path.exists(registrations_file):
            return jsonify({
                'success': True,
                'registrations': [],
                'total': 0
            })
        
        with open(registrations_file, 'r', encoding='utf-8') as f:
            registrations = json.load(f)
        
        # ترتيب حسب تاريخ التقديم (الأحدث أولاً)
        registrations.sort(key=lambda x: x['submission_date'], reverse=True)
        
        return jsonify({
            'success': True,
            'registrations': registrations,
            'total': len(registrations)
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'حدث خطأ أثناء جلب البيانات: {str(e)}'
        }), 500

@registration_bp.route('/api/registration/<registration_number>', methods=['GET'])
def get_registration(registration_number):
    """عرض تفاصيل طلب تسجيل محدد"""
    try:
        import json
        registrations_file = 'data/registrations.json'
        
        if not os.path.exists(registrations_file):
            return jsonify({
                'success': False,
                'message': 'لم يتم العثور على الطلب'
            }), 404
        
        with open(registrations_file, 'r', encoding='utf-8') as f:
            registrations = json.load(f)
        
        # البحث عن الطلب
        registration = None
        for reg in registrations:
            if reg['registration_number'] == registration_number:
                registration = reg
                break
        
        if not registration:
            return jsonify({
                'success': False,
                'message': 'لم يتم العثور على الطلب'
            }), 404
        
        return jsonify({
            'success': True,
            'registration': registration
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'حدث خطأ أثناء جلب البيانات: {str(e)}'
        }), 500

@registration_bp.route('/api/registration/<registration_number>/status', methods=['PUT'])
def update_registration_status(registration_number):
    """تحديث حالة طلب التسجيل"""
    try:
        import json
        registrations_file = 'data/registrations.json'
        
        if not os.path.exists(registrations_file):
            return jsonify({
                'success': False,
                'message': 'لم يتم العثور على الطلب'
            }), 404
        
        data = request.get_json()
        new_status = data.get('status')
        notes = data.get('notes', '')
        
        # قراءة السجلات
        with open(registrations_file, 'r', encoding='utf-8') as f:
            registrations = json.load(f)
        
        # البحث عن الطلب وتحديثه
        updated = False
        for reg in registrations:
            if reg['registration_number'] == registration_number:
                reg['status'] = new_status
                reg['updated_at'] = datetime.now().isoformat()
                if notes:
                    if 'notes' not in reg:
                        reg['notes'] = []
                    reg['notes'].append({
                        'note': notes,
                        'timestamp': datetime.now().isoformat()
                    })
                updated = True
                break
        
        if not updated:
            return jsonify({
                'success': False,
                'message': 'لم يتم العثور على الطلب'
            }), 404
        
        # حفظ التحديثات
        with open(registrations_file, 'w', encoding='utf-8') as f:
            json.dump(registrations, f, ensure_ascii=False, indent=2)
        
        return jsonify({
            'success': True,
            'message': 'تم تحديث حالة الطلب بنجاح'
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'حدث خطأ أثناء التحديث: {str(e)}'
        }), 500

@registration_bp.route('/api/registration/stats', methods=['GET'])
def get_registration_stats():
    """إحصائيات طلبات التسجيل"""
    try:
        import json
        registrations_file = 'data/registrations.json'
        
        if not os.path.exists(registrations_file):
            return jsonify({
                'success': True,
                'stats': {
                    'total': 0,
                    'pending': 0,
                    'approved': 0,
                    'rejected': 0,
                    'today': 0,
                    'this_week': 0,
                    'this_month': 0
                }
            })
        
        with open(registrations_file, 'r', encoding='utf-8') as f:
            registrations = json.load(f)
        
        from datetime import datetime, timedelta
        
        now = datetime.now()
        today = now.date()
        week_ago = now - timedelta(days=7)
        month_ago = now - timedelta(days=30)
        
        stats = {
            'total': len(registrations),
            'pending': 0,
            'approved': 0,
            'rejected': 0,
            'today': 0,
            'this_week': 0,
            'this_month': 0
        }
        
        for reg in registrations:
            # إحصائيات الحالة
            status = reg.get('status', 'pending_review')
            if status == 'pending_review':
                stats['pending'] += 1
            elif status == 'approved':
                stats['approved'] += 1
            elif status == 'rejected':
                stats['rejected'] += 1
            
            # إحصائيات التاريخ
            submission_date = datetime.fromisoformat(reg['submission_date']).date()
            if submission_date == today:
                stats['today'] += 1
            if datetime.fromisoformat(reg['submission_date']) >= week_ago:
                stats['this_week'] += 1
            if datetime.fromisoformat(reg['submission_date']) >= month_ago:
                stats['this_month'] += 1
        
        return jsonify({
            'success': True,
            'stats': stats
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'حدث خطأ أثناء جلب الإحصائيات: {str(e)}'
        }), 500


from flask import Blueprint, request, jsonify, current_app
from src.models.user import db, User, Child, Attendance
from src.routes.auth import token_required, admin_required
from datetime import datetime, date
from sqlalchemy import and_, func

attendance_bp = Blueprint('attendance', __name__)

@attendance_bp.route('/scan-qr', methods=['POST'])
@token_required
def scan_qr_code(current_user):
    """مسح QR Code للحضور والانصراف (الموظفين فقط)"""
    try:
        # التحقق من أن المستخدم موظف
        if current_user.role not in ['staff', 'admin']:
            return jsonify({'message': 'Only staff can scan QR codes'}), 403
        
        data = request.get_json()
        qr_code = data.get('qr_code')
        
        if not qr_code:
            return jsonify({'message': 'QR code is required'}), 400
        
        # البحث عن الطفل بواسطة QR Code
        child = Child.query.filter_by(qr_code=qr_code, is_approved=True, is_active=True).first()
        
        if not child:
            return jsonify({'message': 'Invalid QR code or child not approved'}), 404
        
        # التحقق من آخر حالة حضور للطفل اليوم
        today = date.today()
        last_attendance = Attendance.query.filter(
            and_(
                Attendance.child_id == child.id,
                func.date(Attendance.timestamp) == today
            )
        ).order_by(Attendance.timestamp.desc()).first()
        
        # تحديد نوع العملية (دخول أم خروج)
        if not last_attendance or last_attendance.status == 'check_out':
            # الطفل غير موجود أو خرج، فهذا دخول
            status = 'check_in'
            message = f'{child.name} تم تسجيل دخوله بنجاح'
        else:
            # الطفل موجود، فهذا خروج
            status = 'check_out'
            message = f'{child.name} تم تسجيل خروجه بنجاح'
        
        # إنشاء سجل حضور جديد
        attendance = Attendance(
            child_id=child.id,
            staff_id=current_user.id,
            status=status,
            notes=data.get('notes')
        )
        
        db.session.add(attendance)
        db.session.commit()
        
        # إرسال إشعار لولي الأمر (TODO: تنفيذ الإشعارات)
        
        return jsonify({
            'message': message,
            'attendance': attendance.to_dict(),
            'child': child.to_dict(),
            'status': status
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': f'Failed to process QR scan: {str(e)}'}), 500

@attendance_bp.route('/child/<int:child_id>/today', methods=['GET'])
@token_required
def get_child_attendance_today(current_user, child_id):
    """الحصول على حضور طفل محدد لليوم الحالي"""
    try:
        child = Child.query.get(child_id)
        
        if not child:
            return jsonify({'message': 'Child not found'}), 404
        
        # التحقق من الصلاحيات
        if current_user.role == 'parent' and child.parent_id != current_user.id:
            return jsonify({'message': 'Access denied'}), 403
        
        # الحصول على حضور اليوم
        today = date.today()
        attendance_records = Attendance.query.filter(
            and_(
                Attendance.child_id == child_id,
                func.date(Attendance.timestamp) == today
            )
        ).order_by(Attendance.timestamp.asc()).all()
        
        # تحديد الحالة الحالية
        current_status = 'absent'
        if attendance_records:
            last_record = attendance_records[-1]
            current_status = 'present' if last_record.status == 'check_in' else 'absent'
        
        return jsonify({
            'child': child.to_dict(),
            'current_status': current_status,
            'attendance_records': [record.to_dict() for record in attendance_records]
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Failed to get attendance: {str(e)}'}), 500

@attendance_bp.route('/today', methods=['GET'])
@token_required
def get_today_attendance(current_user):
    """الحصول على حضور جميع الأطفال لليوم الحالي (الموظفين والإدارة)"""
    try:
        if current_user.role not in ['staff', 'admin']:
            return jsonify({'message': 'Access denied'}), 403
        
        today = date.today()
        
        # الحصول على جميع الأطفال المعتمدين
        children = Child.query.filter_by(is_approved=True, is_active=True).all()
        
        attendance_summary = []
        
        for child in children:
            # الحصول على آخر سجل حضور لهذا الطفل اليوم
            last_attendance = Attendance.query.filter(
                and_(
                    Attendance.child_id == child.id,
                    func.date(Attendance.timestamp) == today
                )
            ).order_by(Attendance.timestamp.desc()).first()
            
            status = 'absent'
            last_action_time = None
            
            if last_attendance:
                status = 'present' if last_attendance.status == 'check_in' else 'absent'
                last_action_time = last_attendance.timestamp.isoformat()
            
            child_data = child.to_dict()
            child_data['parent'] = child.parent.to_dict()
            child_data['current_status'] = status
            child_data['last_action_time'] = last_action_time
            
            attendance_summary.append(child_data)
        
        # إحصائيات سريعة
        present_count = sum(1 for child in attendance_summary if child['current_status'] == 'present')
        absent_count = len(attendance_summary) - present_count
        
        return jsonify({
            'date': today.isoformat(),
            'summary': {
                'total_children': len(attendance_summary),
                'present': present_count,
                'absent': absent_count
            },
            'children': attendance_summary
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Failed to get today attendance: {str(e)}'}), 500

@attendance_bp.route('/child/<int:child_id>/history', methods=['GET'])
@token_required
def get_child_attendance_history(current_user, child_id):
    """الحصول على تاريخ حضور طفل محدد"""
    try:
        child = Child.query.get(child_id)
        
        if not child:
            return jsonify({'message': 'Child not found'}), 404
        
        # التحقق من الصلاحيات
        if current_user.role == 'parent' and child.parent_id != current_user.id:
            return jsonify({'message': 'Access denied'}), 403
        
        # الحصول على معاملات الاستعلام
        days = request.args.get('days', 30, type=int)  # آخر 30 يوم افتراضياً
        
        # الحصول على سجلات الحضور
        attendance_records = Attendance.query.filter_by(child_id=child_id)\
            .order_by(Attendance.timestamp.desc())\
            .limit(days * 4).all()  # تقدير 4 سجلات كحد أقصى في اليوم
        
        # تجميع البيانات حسب التاريخ
        daily_attendance = {}
        
        for record in attendance_records:
            record_date = record.timestamp.date().isoformat()
            
            if record_date not in daily_attendance:
                daily_attendance[record_date] = {
                    'date': record_date,
                    'records': [],
                    'status': 'absent'
                }
            
            daily_attendance[record_date]['records'].append(record.to_dict())
            
            # تحديد الحالة النهائية لليوم
            if record.status == 'check_in':
                daily_attendance[record_date]['status'] = 'present'
        
        # ترتيب البيانات حسب التاريخ
        sorted_attendance = sorted(daily_attendance.values(), 
                                 key=lambda x: x['date'], reverse=True)
        
        return jsonify({
            'child': child.to_dict(),
            'attendance_history': sorted_attendance
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Failed to get attendance history: {str(e)}'}), 500

@attendance_bp.route('/stats', methods=['GET'])
@token_required
@admin_required
def get_attendance_stats(current_user):
    """الحصول على إحصائيات الحضور (الإدارة فقط)"""
    try:
        # الحصول على معاملات الاستعلام
        days = request.args.get('days', 7, type=int)  # آخر 7 أيام افتراضياً
        
        # حساب التواريخ
        end_date = date.today()
        start_date = date.fromordinal(end_date.toordinal() - days + 1)
        
        # الحصول على جميع الأطفال المعتمدين
        total_children = Child.query.filter_by(is_approved=True, is_active=True).count()
        
        # إحصائيات يومية
        daily_stats = []
        
        for i in range(days):
            current_date = date.fromordinal(start_date.toordinal() + i)
            
            # عدد الأطفال الحاضرين في هذا اليوم
            present_children = db.session.query(Attendance.child_id)\
                .filter(
                    and_(
                        func.date(Attendance.timestamp) == current_date,
                        Attendance.status == 'check_in'
                    )
                ).distinct().count()
            
            daily_stats.append({
                'date': current_date.isoformat(),
                'total_children': total_children,
                'present': present_children,
                'absent': total_children - present_children,
                'attendance_rate': round((present_children / total_children * 100) if total_children > 0 else 0, 2)
            })
        
        # إحصائيات عامة
        avg_attendance_rate = sum(day['attendance_rate'] for day in daily_stats) / len(daily_stats) if daily_stats else 0
        
        return jsonify({
            'period': {
                'start_date': start_date.isoformat(),
                'end_date': end_date.isoformat(),
                'days': days
            },
            'summary': {
                'total_children': total_children,
                'average_attendance_rate': round(avg_attendance_rate, 2)
            },
            'daily_stats': daily_stats
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Failed to get attendance stats: {str(e)}'}), 500


#!/usr/bin/env python3
"""
سكريبت لإنشاء بيانات تجريبية لمنصة حاضِن
"""

import sqlite3
import hashlib
import uuid
from datetime import datetime, timedelta
import random

def hash_password(password):
    """تشفير كلمة المرور"""
    return hashlib.sha256(password.encode()).hexdigest()

def generate_qr_code():
    """توليد رمز QR فريد"""
    return f"QR_{uuid.uuid4().hex[:8].upper()}"

def create_test_data():
    """إنشاء بيانات تجريبية"""
    conn = sqlite3.connect('hadhin.db')
    cursor = conn.cursor()
    
    # إنشاء الجداول
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL,
            phone TEXT,
            password_hash TEXT NOT NULL,
            role TEXT CHECK(role IN ('admin','staff','parent')) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS children (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            birthdate DATE,
            parent_id INTEGER,
            qr_code TEXT UNIQUE,
            is_approved BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (parent_id) REFERENCES users(id)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS attendance (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            child_id INTEGER,
            staff_id INTEGER,
            status TEXT CHECK(status IN ('check_in','check_out')),
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            notes TEXT,
            FOREIGN KEY (child_id) REFERENCES children(id),
            FOREIGN KEY (staff_id) REFERENCES users(id)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS daily_updates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            child_id INTEGER,
            staff_id INTEGER,
            activity_type TEXT,
            note TEXT,
            photo_url TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (child_id) REFERENCES children(id),
            FOREIGN KEY (staff_id) REFERENCES users(id)
        )
    ''')
    
    # مسح البيانات الموجودة
    cursor.execute('DELETE FROM daily_updates')
    cursor.execute('DELETE FROM attendance')
    cursor.execute('DELETE FROM children')
    cursor.execute('DELETE FROM users')
    
    # إنشاء مستخدم إداري
    cursor.execute('''
        INSERT INTO users (name, email, phone, password_hash, role)
        VALUES (?, ?, ?, ?, ?)
    ''', ('أحمد المدير', 'admin@brightkids.com', '0501234567', hash_password('admin123'), 'admin'))
    
    # إنشاء موظفين
    staff_data = [
        ('فاطمة المربية', 'fatima@brightkids.com', '0507654321', 'staff123'),
        ('سارة المشرفة', 'sara@brightkids.com', '0509876543', 'staff123'),
        ('محمد المربي', 'mohammed.staff@brightkids.com', '0502468135', 'staff123'),
    ]
    
    staff_ids = []
    for name, email, phone, password in staff_data:
        cursor.execute('''
            INSERT INTO users (name, email, phone, password_hash, role)
            VALUES (?, ?, ?, ?, ?)
        ''', (name, email, phone, hash_password(password), 'staff'))
        staff_ids.append(cursor.lastrowid)
    
    # إنشاء أولياء أمور
    parents_data = [
        ('محمد أحمد', 'mohammed.parent@gmail.com', '0509876543', 'parent123'),
        ('علي حسن', 'ali.hassan@gmail.com', '0507654321', 'parent123'),
        ('خالد يوسف', 'khalid.youssef@gmail.com', '0501357924', 'parent123'),
        ('عبدالله سالم', 'abdullah.salem@gmail.com', '0508642097', 'parent123'),
        ('أحمد عبدالرحمن', 'ahmed.abdulrahman@gmail.com', '0505432109', 'parent123'),
    ]
    
    parent_ids = []
    for name, email, phone, password in parents_data:
        cursor.execute('''
            INSERT INTO users (name, email, phone, password_hash, role)
            VALUES (?, ?, ?, ?, ?)
        ''', (name, email, phone, hash_password(password), 'parent'))
        parent_ids.append(cursor.lastrowid)
    
    # إنشاء أطفال
    children_data = [
        ('أحمد محمد', '2020-05-15', parent_ids[0], True),
        ('فاطمة علي', '2019-08-22', parent_ids[1], True),
        ('يوسف خالد', '2021-03-10', parent_ids[2], True),
        ('مريم عبدالله', '2020-11-05', parent_ids[3], True),
        ('عمر أحمد', '2019-12-18', parent_ids[4], True),
        ('نور محمد', '2021-01-25', parent_ids[0], False),  # طفل ثاني لنفس الوالد
        ('سارة علي', '2020-07-30', parent_ids[1], False),   # طفل ثاني لنفس الوالد
        ('حسام خالد', '2021-09-12', parent_ids[2], False),  # طفل ثالث منتظر الموافقة
    ]
    
    child_ids = []
    for name, birthdate, parent_id, is_approved in children_data:
        qr_code = generate_qr_code()
        cursor.execute('''
            INSERT INTO children (name, birthdate, parent_id, qr_code, is_approved)
            VALUES (?, ?, ?, ?, ?)
        ''', (name, birthdate, parent_id, qr_code, is_approved))
        child_ids.append(cursor.lastrowid)
    
    # إنشاء سجلات حضور للأسبوع الماضي
    approved_children = child_ids[:5]  # الأطفال المقبولين فقط
    
    for day_offset in range(7):
        date = datetime.now() - timedelta(days=day_offset)
        
        for child_id in approved_children:
            # احتمالية حضور 85%
            if random.random() < 0.85:
                staff_id = random.choice(staff_ids)
                
                # تسجيل دخول
                check_in_time = date.replace(hour=random.randint(7, 9), minute=random.randint(0, 59))
                cursor.execute('''
                    INSERT INTO attendance (child_id, staff_id, status, timestamp, notes)
                    VALUES (?, ?, ?, ?, ?)
                ''', (child_id, staff_id, 'check_in', check_in_time, 'حضور عادي'))
                
                # تسجيل خروج (احتمالية 90%)
                if random.random() < 0.9:
                    check_out_time = date.replace(hour=random.randint(14, 16), minute=random.randint(0, 59))
                    cursor.execute('''
                        INSERT INTO attendance (child_id, staff_id, status, timestamp, notes)
                        VALUES (?, ?, ?, ?, ?)
                    ''', (child_id, staff_id, 'check_out', check_out_time, 'انصراف عادي'))
    
    # إنشاء تحديثات يومية
    activity_types = [
        ('أكل', '🍽️'),
        ('نوم', '😴'),
        ('لعب', '🎮'),
        ('تعلم', '📚'),
        ('رياضة', '⚽'),
        ('فن', '🎨'),
        ('موسيقى', '🎵'),
        ('طبي', '🏥')
    ]
    
    sample_notes = [
        'تناول وجبة الإفطار بشهية جيدة',
        'نام لمدة ساعتين بهدوء',
        'لعب مع الأطفال الآخرين بمرح',
        'تعلم الحروف الجديدة بحماس',
        'مارس الرياضة في الحديقة',
        'رسم لوحة جميلة بالألوان',
        'غنى أغنية جديدة مع المجموعة',
        'فحص طبي روتيني - كل شيء طبيعي',
        'شارك في النشاط الجماعي',
        'أظهر تحسناً في المهارات الحركية',
    ]
    
    for day_offset in range(5):  # آخر 5 أيام
        date = datetime.now() - timedelta(days=day_offset)
        
        for child_id in approved_children:
            # إنشاء 2-4 تحديثات لكل طفل يومياً
            num_updates = random.randint(2, 4)
            
            for _ in range(num_updates):
                activity_type, icon = random.choice(activity_types)
                note = random.choice(sample_notes)
                staff_id = random.choice(staff_ids)
                
                update_time = date.replace(
                    hour=random.randint(8, 15),
                    minute=random.randint(0, 59)
                )
                
                cursor.execute('''
                    INSERT INTO daily_updates (child_id, staff_id, activity_type, note, created_at)
                    VALUES (?, ?, ?, ?, ?)
                ''', (child_id, staff_id, activity_type, note, update_time))
    
    conn.commit()
    conn.close()
    
    print("✅ تم إنشاء البيانات التجريبية بنجاح!")
    print("\n📊 البيانات المُنشأة:")
    print("- 1 مدير")
    print("- 3 موظفين")
    print("- 5 أولياء أمور")
    print("- 8 أطفال (5 مقبولين، 3 في الانتظار)")
    print("- سجلات حضور لآخر 7 أيام")
    print("- تحديثات يومية لآخر 5 أيام")
    
    print("\n🔐 بيانات تسجيل الدخول:")
    print("المدير: admin@brightkids.com / admin123")
    print("الموظف: fatima@brightkids.com / staff123")
    print("ولي الأمر: mohammed.parent@gmail.com / parent123")

if __name__ == '__main__':
    create_test_data()


from flask import Blueprint, request, jsonify, current_app
from werkzeug.security import generate_password_hash, check_password_hash
from src.models.user import db, User, Child
import jwt
from datetime import datetime, timedelta
from functools import wraps
import uuid

auth_bp = Blueprint('auth', __name__)

def token_required(f):
    """Decorator للتحقق من صحة JWT Token"""
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        
        if not token:
            return jsonify({'message': 'Token is missing!'}), 401
        
        try:
            if token.startswith('Bearer '):
                token = token[7:]
            
            data = jwt.decode(token, current_app.config['SECRET_KEY'], algorithms=['HS256'])
            current_user = User.query.filter_by(id=data['user_id']).first()
            
            if not current_user:
                return jsonify({'message': 'Token is invalid!'}), 401
                
        except jwt.ExpiredSignatureError:
            return jsonify({'message': 'Token has expired!'}), 401
        except jwt.InvalidTokenError:
            return jsonify({'message': 'Token is invalid!'}), 401
        
        return f(current_user, *args, **kwargs)
    
    return decorated

def admin_required(f):
    """Decorator للتحقق من صلاحيات الإدارة"""
    @wraps(f)
    def decorated(current_user, *args, **kwargs):
        if current_user.role != 'admin':
            return jsonify({'message': 'Admin access required!'}), 403
        return f(current_user, *args, **kwargs)
    
    return decorated

@auth_bp.route('/register/parent', methods=['POST'])
def register_parent():
    """تسجيل ولي أمر جديد"""
    try:
        data = request.get_json()
        
        # التحقق من البيانات المطلوبة
        required_fields = ['name', 'email', 'password', 'phone']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'message': f'{field} is required'}), 400
        
        # التحقق من عدم وجود المستخدم مسبقاً
        if User.query.filter_by(email=data['email']).first():
            return jsonify({'message': 'Email already exists'}), 400
        
        # إنشاء المستخدم الجديد
        user = User(
            name=data['name'],
            email=data['email'],
            phone=data['phone'],
            role='parent'
        )
        user.set_password(data['password'])
        user.generate_verification_token()
        
        db.session.add(user)
        db.session.commit()
        
        # توليد JWT Token
        token = jwt.encode({
            'user_id': user.id,
            'exp': datetime.utcnow() + timedelta(days=30)
        }, current_app.config['SECRET_KEY'], algorithm='HS256')
        
        return jsonify({
            'message': 'Parent registered successfully',
            'token': token,
            'user': user.to_dict()
        }), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': f'Registration failed: {str(e)}'}), 500

@auth_bp.route('/register/staff', methods=['POST'])
def register_staff():
    """تسجيل موظف جديد (يتطلب دعوة من الإدارة)"""
    try:
        data = request.get_json()
        
        # التحقق من البيانات المطلوبة
        required_fields = ['name', 'email', 'password', 'phone']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'message': f'{field} is required'}), 400
        
        # التحقق من كود الدعوة (اختياري - يمكن تطويره لاحقاً)
        invitation_code = data.get('invitation_code')
        
        # التحقق من عدم وجود المستخدم مسبقاً
        if User.query.filter_by(email=data['email']).first():
            return jsonify({'message': 'Email already exists'}), 400
        
        # إنشاء المستخدم الجديد
        user = User(
            name=data['name'],
            email=data['email'],
            phone=data['phone'],
            role='staff',
            is_verified=True  # الموظفين يتم تفعيلهم مباشرة
        )
        user.set_password(data['password'])
        
        db.session.add(user)
        db.session.commit()
        
        # توليد JWT Token
        token = jwt.encode({
            'user_id': user.id,
            'exp': datetime.utcnow() + timedelta(days=30)
        }, current_app.config['SECRET_KEY'], algorithm='HS256')
        
        return jsonify({
            'message': 'Staff registered successfully',
            'token': token,
            'user': user.to_dict()
        }), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': f'Registration failed: {str(e)}'}), 500

@auth_bp.route('/login', methods=['POST'])
def login():
    """تسجيل دخول المستخدمين"""
    try:
        data = request.get_json()
        
        if not data.get('email') or not data.get('password'):
            return jsonify({'message': 'Email and password are required'}), 400
        
        user = User.query.filter_by(email=data['email']).first()
        
        if not user or not user.check_password(data['password']):
            return jsonify({'message': 'Invalid email or password'}), 401
        
        if not user.is_active:
            return jsonify({'message': 'Account is deactivated'}), 401
        
        # توليد JWT Token
        token = jwt.encode({
            'user_id': user.id,
            'exp': datetime.utcnow() + timedelta(days=30)
        }, current_app.config['SECRET_KEY'], algorithm='HS256')
        
        return jsonify({
            'message': 'Login successful',
            'token': token,
            'user': user.to_dict()
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Login failed: {str(e)}'}), 500

@auth_bp.route('/forgot-password', methods=['POST'])
def forgot_password():
    """طلب إعادة تعيين كلمة المرور"""
    try:
        data = request.get_json()
        
        if not data.get('email'):
            return jsonify({'message': 'Email is required'}), 400
        
        user = User.query.filter_by(email=data['email']).first()
        
        if not user:
            return jsonify({'message': 'Email not found'}), 404
        
        # توليد رمز إعادة التعيين
        reset_token = user.generate_reset_token()
        db.session.commit()
        
        # هنا يمكن إرسال البريد الإلكتروني أو SMS
        # TODO: إضافة خدمة إرسال البريد الإلكتروني
        
        return jsonify({
            'message': 'Password reset token generated',
            'reset_token': reset_token  # في الإنتاج، لا نرسل الرمز في الاستجابة
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': f'Failed to generate reset token: {str(e)}'}), 500

@auth_bp.route('/reset-password', methods=['POST'])
def reset_password():
    """إعادة تعيين كلمة المرور"""
    try:
        data = request.get_json()
        
        required_fields = ['reset_token', 'new_password']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'message': f'{field} is required'}), 400
        
        user = User.query.filter_by(reset_token=data['reset_token']).first()
        
        if not user:
            return jsonify({'message': 'Invalid reset token'}), 400
        
        if user.reset_token_expires and user.reset_token_expires < datetime.utcnow():
            return jsonify({'message': 'Reset token has expired'}), 400
        
        # تحديث كلمة المرور
        user.set_password(data['new_password'])
        user.reset_token = None
        user.reset_token_expires = None
        
        db.session.commit()
        
        return jsonify({'message': 'Password reset successfully'}), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': f'Password reset failed: {str(e)}'}), 500

@auth_bp.route('/profile', methods=['GET'])
@token_required
def get_profile(current_user):
    """الحصول على بيانات المستخدم الحالي"""
    return jsonify({
        'user': current_user.to_dict()
    }), 200

@auth_bp.route('/profile', methods=['PUT'])
@token_required
def update_profile(current_user):
    """تحديث بيانات المستخدم الحالي"""
    try:
        data = request.get_json()
        
        # تحديث البيانات المسموحة
        if data.get('name'):
            current_user.name = data['name']
        if data.get('phone'):
            current_user.phone = data['phone']
        
        current_user.updated_at = datetime.utcnow()
        db.session.commit()
        
        return jsonify({
            'message': 'Profile updated successfully',
            'user': current_user.to_dict()
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': f'Profile update failed: {str(e)}'}), 500


from flask import Blueprint, request, jsonify, current_app
from src.models.user import db, User, Child
from src.routes.auth import token_required, admin_required
from datetime import datetime
import uuid

children_bp = Blueprint('children', __name__)

@children_bp.route('/add', methods=['POST'])
@token_required
def add_child(current_user):
    """إضافة طفل جديد (ولي الأمر فقط)"""
    try:
        # التحقق من أن المستخدم هو ولي أمر
        if current_user.role != 'parent':
            return jsonify({'message': 'Only parents can add children'}), 403
        
        data = request.get_json()
        
        # التحقق من البيانات المطلوبة
        if not data.get('name'):
            return jsonify({'message': 'Child name is required'}), 400
        
        # إنشاء الطفل الجديد
        child = Child(
            name=data['name'],
            birthdate=datetime.strptime(data['birthdate'], '%Y-%m-%d').date() if data.get('birthdate') else None,
            parent_id=current_user.id,
            photo_url=data.get('photo_url'),
            is_approved=False  # يحتاج موافقة الإدارة
        )
        
        db.session.add(child)
        db.session.flush()  # للحصول على ID الطفل
        
        # توليد QR Code
        child.generate_qr_code()
        
        db.session.commit()
        
        return jsonify({
            'message': 'Child added successfully. Waiting for admin approval.',
            'child': child.to_dict()
        }), 201
        
    except ValueError as e:
        return jsonify({'message': 'Invalid date format. Use YYYY-MM-DD'}), 400
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': f'Failed to add child: {str(e)}'}), 500

@children_bp.route('/my-children', methods=['GET'])
@token_required
def get_my_children(current_user):
    """الحصول على قائمة أطفال ولي الأمر"""
    try:
        if current_user.role != 'parent':
            return jsonify({'message': 'Only parents can view their children'}), 403
        
        children = Child.query.filter_by(parent_id=current_user.id, is_active=True).all()
        
        return jsonify({
            'children': [child.to_dict() for child in children]
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Failed to get children: {str(e)}'}), 500

@children_bp.route('/pending-approval', methods=['GET'])
@token_required
@admin_required
def get_pending_children(current_user):
    """الحصول على قائمة الأطفال المنتظرين الموافقة (الإدارة فقط)"""
    try:
        children = Child.query.filter_by(is_approved=False, is_active=True).all()
        
        children_with_parents = []
        for child in children:
            child_dict = child.to_dict()
            child_dict['parent'] = child.parent.to_dict()
            children_with_parents.append(child_dict)
        
        return jsonify({
            'pending_children': children_with_parents
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Failed to get pending children: {str(e)}'}), 500

@children_bp.route('/<int:child_id>/approve', methods=['POST'])
@token_required
@admin_required
def approve_child(current_user, child_id):
    """الموافقة على طفل (الإدارة فقط)"""
    try:
        child = Child.query.get(child_id)
        
        if not child:
            return jsonify({'message': 'Child not found'}), 404
        
        child.is_approved = True
        child.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        return jsonify({
            'message': 'Child approved successfully',
            'child': child.to_dict()
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': f'Failed to approve child: {str(e)}'}), 500

@children_bp.route('/<int:child_id>/reject', methods=['POST'])
@token_required
@admin_required
def reject_child(current_user, child_id):
    """رفض طفل (الإدارة فقط)"""
    try:
        child = Child.query.get(child_id)
        
        if not child:
            return jsonify({'message': 'Child not found'}), 404
        
        data = request.get_json()
        rejection_reason = data.get('reason', 'No reason provided')
        
        # يمكن إضافة حقل لسبب الرفض في المستقبل
        child.is_active = False
        child.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        return jsonify({
            'message': 'Child rejected successfully',
            'reason': rejection_reason
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': f'Failed to reject child: {str(e)}'}), 500

@children_bp.route('/all', methods=['GET'])
@token_required
@admin_required
def get_all_children(current_user):
    """الحصول على قائمة جميع الأطفال (الإدارة فقط)"""
    try:
        children = Child.query.filter_by(is_active=True).all()
        
        children_with_parents = []
        for child in children:
            child_dict = child.to_dict()
            child_dict['parent'] = child.parent.to_dict()
            children_with_parents.append(child_dict)
        
        return jsonify({
            'children': children_with_parents
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Failed to get children: {str(e)}'}), 500

@children_bp.route('/<int:child_id>', methods=['GET'])
@token_required
def get_child_details(current_user, child_id):
    """الحصول على تفاصيل طفل محدد"""
    try:
        child = Child.query.get(child_id)
        
        if not child:
            return jsonify({'message': 'Child not found'}), 404
        
        # التحقق من الصلاحيات
        if current_user.role == 'parent' and child.parent_id != current_user.id:
            return jsonify({'message': 'Access denied'}), 403
        
        child_dict = child.to_dict()
        
        # إضافة بيانات ولي الأمر للإدارة والموظفين
        if current_user.role in ['admin', 'staff']:
            child_dict['parent'] = child.parent.to_dict()
        
        return jsonify({
            'child': child_dict
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Failed to get child details: {str(e)}'}), 500

@children_bp.route('/<int:child_id>', methods=['PUT'])
@token_required
def update_child(current_user, child_id):
    """تحديث بيانات طفل"""
    try:
        child = Child.query.get(child_id)
        
        if not child:
            return jsonify({'message': 'Child not found'}), 404
        
        # التحقق من الصلاحيات
        if current_user.role == 'parent' and child.parent_id != current_user.id:
            return jsonify({'message': 'Access denied'}), 403
        elif current_user.role == 'staff':
            return jsonify({'message': 'Staff cannot edit child information'}), 403
        
        data = request.get_json()
        
        # تحديث البيانات المسموحة
        if data.get('name'):
            child.name = data['name']
        if data.get('birthdate'):
            child.birthdate = datetime.strptime(data['birthdate'], '%Y-%m-%d').date()
        if data.get('photo_url'):
            child.photo_url = data['photo_url']
        
        child.updated_at = datetime.utcnow()
        db.session.commit()
        
        return jsonify({
            'message': 'Child updated successfully',
            'child': child.to_dict()
        }), 200
        
    except ValueError as e:
        return jsonify({'message': 'Invalid date format. Use YYYY-MM-DD'}), 400
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': f'Failed to update child: {str(e)}'}), 500

@children_bp.route('/<int:child_id>/qr-code', methods=['GET'])
@token_required
def get_child_qr_code(current_user, child_id):
    """الحصول على QR Code الخاص بالطفل"""
    try:
        child = Child.query.get(child_id)
        
        if not child:
            return jsonify({'message': 'Child not found'}), 404
        
        # التحقق من الصلاحيات
        if current_user.role == 'parent' and child.parent_id != current_user.id:
            return jsonify({'message': 'Access denied'}), 403
        
        if not child.is_approved:
            return jsonify({'message': 'Child is not approved yet'}), 400
        
        return jsonify({
            'child_id': child.id,
            'child_name': child.name,
            'qr_code': child.qr_code
        }), 200
        
    except Exception as e:
        return jsonify({'message': f'Failed to get QR code: {str(e)}'}), 500


/* تحسينات إضافية لاستمارة التسجيل */

.registration-form {
  font-family: 'Tajawal', Arial, sans-serif;
  direction: rtl;
}

.step-indicator {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 2rem;
}

.step-circle {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  margin: 0 10px;
  transition: all 0.3s ease;
}

.step-circle.active {
  background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%);
  color: white;
  transform: scale(1.1);
}

.step-circle.completed {
  background: linear-gradient(135deg, #6BCF7F 0%, #4CAF50 100%);
  color: white;
}

.step-circle.inactive {
  background: #e0e0e0;
  color: #999;
}

.step-line {
  width: 50px;
  height: 2px;
  background: #e0e0e0;
  transition: all 0.3s ease;
}

.step-line.completed {
  background: linear-gradient(135deg, #6BCF7F 0%, #4CAF50 100%);
}

.form-section {
  margin-bottom: 2rem;
}

.form-section h3 {
  color: #4A90E2;
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 1rem;
  border-bottom: 2px solid #FF6B35;
  padding-bottom: 0.5rem;
}

.input-group {
  margin-bottom: 1.5rem;
}

.input-label {
  display: block;
  color: #333;
  font-weight: 600;
  margin-bottom: 0.5rem;
  font-size: 0.9rem;
}

.required {
  color: #FF6B35;
}

.input-field {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 1rem;
  transition: all 0.3s ease;
  background: white;
}

.input-field:focus {
  border-color: #4A90E2;
  box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
  outline: none;
}

.input-field:invalid {
  border-color: #e74c3c;
}

.radio-group {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.radio-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 6px;
  transition: background-color 0.3s ease;
}

.radio-item:hover {
  background-color: rgba(74, 144, 226, 0.05);
}

.checkbox-group {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.checkbox-item {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  cursor: pointer;
  padding: 0.75rem;
  border: 1px solid #e1e5e9;
  border-radius: 8px;
  transition: all 0.3s ease;
}

.checkbox-item:hover {
  border-color: #4A90E2;
  background-color: rgba(74, 144, 226, 0.02);
}

.checkbox-item.checked {
  border-color: #FF6B35;
  background-color: rgba(255, 107, 53, 0.05);
}

.file-upload-zone {
  border: 2px dashed #4A90E2;
  border-radius: 12px;
  padding: 2rem;
  text-align: center;
  cursor: pointer;
  transition: all 0.3s ease;
  background: rgba(74, 144, 226, 0.02);
}

.file-upload-zone:hover {
  border-color: #FF6B35;
  background: rgba(255, 107, 53, 0.05);
  transform: translateY(-2px);
}

.file-upload-zone.dragover {
  border-color: #FF6B35;
  background: rgba(255, 107, 53, 0.1);
  transform: scale(1.02);
}

.file-upload-icon {
  font-size: 3rem;
  color: #4A90E2;
  margin-bottom: 1rem;
}

.file-upload-text {
  color: #666;
  font-size: 1rem;
  margin-bottom: 0.5rem;
}

.file-upload-hint {
  color: #999;
  font-size: 0.875rem;
}

.uploaded-file {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem;
  background: rgba(108, 207, 127, 0.1);
  border: 1px solid #6BCF7F;
  border-radius: 8px;
  margin-top: 0.75rem;
}

.uploaded-file-icon {
  color: #6BCF7F;
  font-size: 1.25rem;
}

.uploaded-file-name {
  color: #333;
  font-weight: 500;
  flex: 1;
}

.remove-file-btn {
  color: #e74c3c;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.remove-file-btn:hover {
  background-color: rgba(231, 76, 60, 0.1);
}

.authorized-person-card {
  border: 1px solid #e1e5e9;
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 1rem;
  background: white;
  transition: all 0.3s ease;
}

.authorized-person-card:hover {
  border-color: #4A90E2;
  box-shadow: 0 4px 12px rgba(74, 144, 226, 0.1);
}

.authorized-person-header {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1rem;
  color: #4A90E2;
  font-weight: 600;
}

.navigation-buttons {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 2rem;
  padding-top: 2rem;
  border-top: 1px solid #e1e5e9;
}

.btn {
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none !important;
}

.btn-primary {
  background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%);
  color: white;
}

.btn-primary:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(255, 107, 53, 0.3);
}

.btn-secondary {
  background: linear-gradient(135deg, #4A90E2 0%, #357ABD 100%);
  color: white;
}

.btn-secondary:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(74, 144, 226, 0.3);
}

.btn-outline {
  background: transparent;
  border: 2px solid #4A90E2;
  color: #4A90E2;
}

.btn-outline:hover:not(:disabled) {
  background: #4A90E2;
  color: white;
}

.summary-section {
  background: rgba(74, 144, 226, 0.05);
  border: 1px solid rgba(74, 144, 226, 0.2);
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
}

.summary-title {
  color: #4A90E2;
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 1rem;
}

.summary-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.5rem 0;
  border-bottom: 1px solid rgba(74, 144, 226, 0.1);
}

.summary-item:last-child {
  border-bottom: none;
}

.summary-label {
  color: #666;
  font-weight: 500;
}

.summary-value {
  color: #333;
  font-weight: 600;
}

.error-message {
  color: #e74c3c;
  font-size: 0.875rem;
  margin-top: 0.25rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.success-message {
  color: #6BCF7F;
  font-size: 0.875rem;
  margin-top: 0.25rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.loading-spinner {
  width: 20px;
  height: 20px;
  border: 2px solid #f3f3f3;
  border-top: 2px solid #4A90E2;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* تحسينات للشاشات الصغيرة */
@media (max-width: 768px) {
  .navigation-buttons {
    flex-direction: column;
    gap: 1rem;
  }
  
  .btn {
    width: 100%;
    justify-content: center;
  }
  
  .radio-group {
    flex-direction: column;
  }
  
  .step-indicator {
    flex-wrap: wrap;
  }
  
  .authorized-person-card {
    padding: 1rem;
  }
}

/* تحسينات للطباعة */
@media print {
  .navigation-buttons {
    display: none;
  }
  
  .file-upload-zone {
    display: none;
  }
  
  .btn {
    display: none;
  }
}


from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import uuid

db = SQLAlchemy()

class User(db.Model):
    __tablename__ = 'users'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    phone = db.Column(db.String(20), nullable=True)
    password_hash = db.Column(db.String(255), nullable=False)
    role = db.Column(db.Enum('admin', 'staff', 'parent', name='user_roles'), nullable=False)
    is_active = db.Column(db.Boolean, default=True)
    is_verified = db.Column(db.Boolean, default=False)
    verification_token = db.Column(db.String(255), nullable=True)
    reset_token = db.Column(db.String(255), nullable=True)
    reset_token_expires = db.Column(db.DateTime, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # العلاقات
    children = db.relationship('Child', backref='parent', lazy=True, foreign_keys='Child.parent_id')
    staff_updates = db.relationship('DailyUpdate', backref='staff_member', lazy=True, foreign_keys='DailyUpdate.staff_id')
    attendance_records = db.relationship('Attendance', backref='staff_member', lazy=True, foreign_keys='Attendance.staff_id')
    
    def set_password(self, password):
        """تشفير كلمة المرور"""
        self.password_hash = generate_password_hash(password)
    
    def check_password(self, password):
        """التحقق من كلمة المرور"""
        return check_password_hash(self.password_hash, password)
    
    def generate_verification_token(self):
        """توليد رمز التحقق"""
        self.verification_token = str(uuid.uuid4())
        return self.verification_token
    
    def generate_reset_token(self):
        """توليد رمز إعادة تعيين كلمة المرور"""
        self.reset_token = str(uuid.uuid4())
        self.reset_token_expires = datetime.utcnow() + timedelta(hours=1)
        return self.reset_token
    
    def to_dict(self):
        """تحويل البيانات إلى قاموس"""
        return {
            'id': self.id,
            'name': self.name,
            'email': self.email,
            'phone': self.phone,
            'role': self.role,
            'is_active': self.is_active,
            'is_verified': self.is_verified,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }

class Child(db.Model):
    __tablename__ = 'children'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    birthdate = db.Column(db.Date, nullable=True)
    parent_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    qr_code = db.Column(db.String(255), unique=True, nullable=True)
    photo_url = db.Column(db.String(255), nullable=True)
    is_approved = db.Column(db.Boolean, default=False)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # العلاقات
    attendance_records = db.relationship('Attendance', backref='child', lazy=True)
    daily_updates = db.relationship('DailyUpdate', backref='child', lazy=True)
    
    def generate_qr_code(self):
        """توليد QR Code للطفل"""
        self.qr_code = f"CHILD_{self.id}_{str(uuid.uuid4())[:8]}"
        return self.qr_code
    
    def to_dict(self):
        """تحويل البيانات إلى قاموس"""
        return {
            'id': self.id,
            'name': self.name,
            'birthdate': self.birthdate.isoformat() if self.birthdate else None,
            'parent_id': self.parent_id,
            'qr_code': self.qr_code,
            'photo_url': self.photo_url,
            'is_approved': self.is_approved,
            'is_active': self.is_active,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }

class Attendance(db.Model):
    __tablename__ = 'attendance'
    
    id = db.Column(db.Integer, primary_key=True)
    child_id = db.Column(db.Integer, db.ForeignKey('children.id'), nullable=False)
    staff_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    status = db.Column(db.Enum('check_in', 'check_out', name='attendance_status'), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    notes = db.Column(db.Text, nullable=True)
    
    def to_dict(self):
        """تحويل البيانات إلى قاموس"""
        return {
            'id': self.id,
            'child_id': self.child_id,
            'staff_id': self.staff_id,
            'status': self.status,
            'timestamp': self.timestamp.isoformat() if self.timestamp else None,
            'notes': self.notes
        }

class DailyUpdate(db.Model):
    __tablename__ = 'daily_updates'
    
    id = db.Column(db.Integer, primary_key=True)
    child_id = db.Column(db.Integer, db.ForeignKey('children.id'), nullable=False)
    staff_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    note = db.Column(db.Text, nullable=True)
    photo_url = db.Column(db.String(255), nullable=True)
    video_url = db.Column(db.String(255), nullable=True)
    activity_type = db.Column(db.String(50), nullable=True)  # أكل، نوم، لعب، تعلم
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    def to_dict(self):
        """تحويل البيانات إلى قاموس"""
        return {
            'id': self.id,
            'child_id': self.child_id,
            'staff_id': self.staff_id,
            'note': self.note,
            'photo_url': self.photo_url,
            'video_url': self.video_url,
            'activity_type': self.activity_type,
            'created_at': self.created_at.isoformat() if self.created_at else None
        }


import React, { useState } from 'react';

const SimpleForm = () => {
  const [formData, setFormData] = useState({
    childName: '',
    parentName: '',
    phone: ''
  });

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    alert('تم إرسال النموذج بنجاح!');
    console.log(formData);
  };

  return (
    <div style={{ 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
      padding: '2rem',
      fontFamily: 'Arial, sans-serif',
      direction: 'rtl'
    }}>
      <div style={{ 
        maxWidth: '600px', 
        margin: '0 auto',
        background: 'white',
        padding: '2rem',
        borderRadius: '12px',
        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
      }}>
        {/* Header */}
        <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
          <div style={{
            width: '80px',
            height: '80px',
            background: 'linear-gradient(135deg, #FF6B35 0%, #4A90E2 100%)',
            borderRadius: '50%',
            margin: '0 auto 1rem',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            color: 'white',
            fontSize: '24px',
            fontWeight: 'bold'
          }}>
            BK
          </div>
          <h1 style={{ 
            color: '#4A90E2', 
            fontSize: '2rem', 
            marginBottom: '0.5rem',
            fontWeight: 'bold'
          }}>
            استمارة تسجيل طفل جديد
          </h1>
          <p style={{ color: '#666', margin: '0.25rem 0' }}>
            مركز Bright Kids للحضانة - YADC7069
          </p>
          <p style={{ color: '#666', margin: '0.25rem 0' }}>
            حي قرطبة، 46429، ينبع | +966 53 750 6160
          </p>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit}>
          <div style={{ marginBottom: '1.5rem' }}>
            <label style={{ 
              display: 'block', 
              marginBottom: '0.5rem', 
              fontWeight: 'bold',
              color: '#333'
            }}>
              اسم الطفل *
            </label>
            <input
              type="text"
              name="childName"
              value={formData.childName}
              onChange={handleChange}
              required
              style={{
                width: '100%',
                padding: '12px',
                border: '2px solid #e1e5e9',
                borderRadius: '8px',
                fontSize: '1rem',
                transition: 'border-color 0.3s ease'
              }}
              placeholder="أدخل اسم الطفل"
            />
          </div>

          <div style={{ marginBottom: '1.5rem' }}>
            <label style={{ 
              display: 'block', 
              marginBottom: '0.5rem', 
              fontWeight: 'bold',
              color: '#333'
            }}>
              اسم ولي الأمر *
            </label>
            <input
              type="text"
              name="parentName"
              value={formData.parentName}
              onChange={handleChange}
              required
              style={{
                width: '100%',
                padding: '12px',
                border: '2px solid #e1e5e9',
                borderRadius: '8px',
                fontSize: '1rem',
                transition: 'border-color 0.3s ease'
              }}
              placeholder="أدخل اسم ولي الأمر"
            />
          </div>

          <div style={{ marginBottom: '2rem' }}>
            <label style={{ 
              display: 'block', 
              marginBottom: '0.5rem', 
              fontWeight: 'bold',
              color: '#333'
            }}>
              رقم الهاتف *
            </label>
            <input
              type="tel"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              required
              style={{
                width: '100%',
                padding: '12px',
                border: '2px solid #e1e5e9',
                borderRadius: '8px',
                fontSize: '1rem',
                transition: 'border-color 0.3s ease'
              }}
              placeholder="+966 53 750 6160"
            />
          </div>

          <button
            type="submit"
            style={{
              width: '100%',
              padding: '12px 24px',
              background: 'linear-gradient(135deg, #FF6B35 0%, #F7931E 100%)',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: 'pointer',
              transition: 'transform 0.3s ease, box-shadow 0.3s ease'
            }}
            onMouseOver={(e) => {
              e.target.style.transform = 'translateY(-2px)';
              e.target.style.boxShadow = '0 8px 25px rgba(255, 107, 53, 0.3)';
            }}
            onMouseOut={(e) => {
              e.target.style.transform = 'translateY(0)';
              e.target.style.boxShadow = 'none';
            }}
          >
            إرسال الطلب
          </button>
        </form>

        {/* Footer */}
        <div style={{ 
          textAlign: 'center', 
          marginTop: '2rem', 
          color: '#666',
          fontSize: '0.9rem'
        }}>
          <p>جميع الحقول المميزة بـ (*) مطلوبة</p>
          <p style={{ marginTop: '0.5rem' }}>
            للمساعدة: +966 53 750 6160 | 
            <a 
              href="https://www.google.com/maps/dir/?api=1&destination=24.0857962992111%2C38.0875255905884"
              target="_blank"
              rel="noopener noreferrer"
              style={{ color: '#4A90E2', textDecoration: 'none', marginRight: '0.5rem' }}
            >
              الموقع على الخريطة
            </a>
          </p>
        </div>
      </div>
    </div>
  );
};

export default SimpleForm;


import { 
  LayoutDashboard, 
  Users, 
  UserCheck, 
  BarChart3, 
  Settings, 
  MessageSquare, 
  FileText, 
  Eye,
  Phone,
  LogOut,
  ClipboardList
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

const Sidebar = ({ activeTab, onTabChange }) => {
  const menuItems = [
    { id: 'dashboard', icon: LayoutDashboard, label: 'لوحة التحكم' },
    { id: 'registrations', icon: ClipboardList, label: 'طلبات التسجيل' },
    { id: 'children', icon: Users, label: 'إدارة الأطفال' },
    { id: 'staff', icon: UserCheck, label: 'إدارة الموظفين' },
    { id: 'reports', icon: BarChart3, label: 'التقارير والتحليلات' },
    { id: 'monitoring', icon: Eye, label: 'المراقبة المباشرة' },
    { id: 'messages', icon: MessageSquare, label: 'الرسائل والإشعارات' },
    { id: 'exports', icon: FileText, label: 'تصدير البيانات' },
    { id: 'settings', icon: Settings, label: 'الإعدادات' },
  ];

  return (
    <div className="sidebar w-64 flex flex-col">
      {/* Header */}
      <div className="p-6 border-b">
        <div className="flex items-center space-x-3 space-x-reverse">
          <img 
            src="/src/assets/bright-kids-logo.png" 
            alt="Bright Kids Logo" 
            className="w-10 h-10"
          />
          <div>
            <h1 className="text-lg font-bold text-bright-admin">Bright Kids</h1>
            <p className="text-sm text-muted-foreground">لوحة الإدارة</p>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <nav className="flex-1 p-4">
        <div className="space-y-2">
          {menuItems.map((item) => {
            const Icon = item.icon;
            const isActive = activeTab === item.id;
            
            return (
              <button
                key={item.id}
                onClick={() => onTabChange(item.id)}
                className={cn(
                  "sidebar-item w-full flex items-center space-x-3 space-x-reverse text-right",
                  isActive && "active"
                )}
              >
                <Icon size={20} />
                <span className="font-medium">{item.label}</span>
              </button>
            );
          })}
        </div>
      </nav>

      {/* Footer */}
      <div className="p-4 border-t">
        <div className="space-y-3">
          {/* Emergency Contact */}
          <Button 
            variant="outline" 
            className="w-full justify-start space-x-2 space-x-reverse"
            onClick={() => window.open('tel:+966594288121')}
          >
            <Phone size={16} />
            <span>اتصال طوارئ</span>
          </Button>
          
          {/* Admin Info */}
          <div className="flex items-center space-x-3 space-x-reverse p-3 bg-gray-50 rounded-lg">
            <div className="w-8 h-8 rounded-full bg-bright-admin flex items-center justify-center">
              <span className="text-white text-sm font-bold">أ</span>
            </div>
            <div className="flex-1">
              <p className="text-sm font-medium">أحمد المدير</p>
              <p className="text-xs text-muted-foreground">مدير عام</p>
            </div>
          </div>
          
          {/* Logout */}
          <Button 
            variant="ghost" 
            className="w-full justify-start space-x-2 space-x-reverse text-bright-danger hover:text-bright-danger hover:bg-bright-danger/10"
          >
            <LogOut size={16} />
            <span>تسجيل الخروج</span>
          </Button>
        </div>
      </div>
    </div>
  );
};

export default Sidebar;


import requests
import json

BASE_URL = "https://j6h5i7cpv6ny.manus.space/api"

def register_parent(name, email, phone, password):
    print(f"\n--- تسجيل ولي أمر جديد: {email} ---")
    url = f"{BASE_URL}/auth/register/parent"
    payload = {
        "name": name,
        "email": email,
        "phone": phone,
        "password": password
    }
    headers = {"Content-Type": "application/json"}
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        print("✅ تم التسجيل بنجاح:")
        print(json.dumps(response.json(), indent=2, ensure_ascii=False))
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"❌ فشل التسجيل: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"الاستجابة: {e.response.text}")
        return None

def login_user(email, password):
    print(f"\n--- تسجيل الدخول للمستخدم: {email} ---")
    url = f"{BASE_URL}/auth/login"
    payload = {
        "email": email,
        "password": password
    }
    headers = {"Content-Type": "application/json"}
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        print("✅ تم تسجيل الدخول بنجاح:")
        print(json.dumps(response.json(), indent=2, ensure_ascii=False))
        return response.json().get("token")
    except requests.exceptions.RequestException as e:
        print(f"❌ فشل تسجيل الدخول: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"الاستجابة: {e.response.text}")
        return None

def add_child(token, name, birthdate):
    print(f"\n--- إضافة طفل جديد: {name} ---")
    url = f"{BASE_URL}/children/add"
    payload = {
        "name": name,
        "birthdate": birthdate
    }
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        print("✅ تم إضافة الطفل بنجاح:")
        print(json.dumps(response.json(), indent=2, ensure_ascii=False))
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"❌ فشل إضافة الطفل: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"الاستجابة: {e.response.text}")
        return None

# بيانات ولي الأمر الجديد للاختبار
new_parent_name = "أحمد علي"
new_parent_email = "ahmed.ali.new@example.com"
new_parent_phone = "0501234567"
new_parent_password = "password123"

# 1. تسجيل ولي أمر جديد
registration_result = register_parent(new_parent_name, new_parent_email, new_parent_phone, new_parent_password)

if registration_result:
    # 2. تسجيل الدخول بولي الأمر الجديد للحصول على التوكن
    access_token = login_user(new_parent_email, new_parent_password)

    if access_token:
        # 3. إضافة طفل جديد باستخدام التوكن
        add_child(access_token, "ليلى أحمد", "2022-03-10")
    else:
        print("لا يمكن إضافة طفل بدون توكن الوصول.")
else:
    print("لا يمكن تسجيل الدخول أو إضافة طفل بدون تسجيل ولي الأمر.")



import requests
import json

BASE_URL = "https://j6h5i7cpv6ny.manus.space/api"

def create_user(endpoint, user_data):
    url = f"{BASE_URL}/{endpoint}"
    headers = {"Content-Type": "application/json"}
    try:
        response = requests.post(url, headers=headers, json=user_data)
        response.raise_for_status()  # Raise an exception for HTTP errors (4xx or 5xx)
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error creating user: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"Response content: {e.response.text}")
        return None

# بيانات الموظف الجديد
new_staff_data = {
    "name": "موظف جديد",
    "email": "new.staff@brightkids.com",
    "phone": "0551234567",
    "password": "newstaff123"
}

# بيانات ولي الأمر الجديد
new_parent_data = {
    "name": "ولي أمر جديد",
    "email": "new.parent@gmail.com",
    "phone": "0557654321",
    "password": "newparent123"
}

print("إنشاء موظف جديد...")
staff_response = create_user("auth/register/staff", new_staff_data)
if staff_response:
    print("✅ تم إنشاء الموظف الجديد بنجاح:")
    print(json.dumps(staff_response, indent=2, ensure_ascii=False))
    print(f'البريد الإلكتروني: {new_staff_data["email"]}')
    print(f'كلمة المرور: {new_staff_data["password"]}')
else:
    print("❌ فشل إنشاء الموظف الجديد.")

print("\nإنشاء ولي أمر جديد...")
parent_response = create_user("auth/register/parent", new_parent_data)
if parent_response:
    print("✅ تم إنشاء ولي الأمر الجديد بنجاح:")
    print(json.dumps(parent_response, indent=2, ensure_ascii=False))
    print(f'البريد الإلكتروني: {new_parent_data["email"]}')
    print(f'كلمة المرور: {new_parent_data["password"]}')
else:
    print("❌ فشل إنشاء ولي الأمر الجديد.")



import os
import sys
# DON'T CHANGE THIS !!!
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from flask import Flask, send_from_directory
from flask_cors import CORS
from src.models.user import db
from src.routes.user import user_bp
from src.routes.auth import auth_bp
from src.routes.children import children_bp
from src.routes.registration import registration_bp

app = Flask(__name__, static_folder=os.path.join(os.path.dirname(__file__), 'static'))
app.config['SECRET_KEY'] = 'asdf#FGSgvasgf$5$WGT'

# تمكين CORS للسماح بالطلبات من الواجهة الأمامية
CORS(app)

# تسجيل المسارات
app.register_blueprint(user_bp, url_prefix='/api/users')
app.register_blueprint(auth_bp, url_prefix='/api/auth')
app.register_blueprint(children_bp, url_prefix='/api/children')
app.register_blueprint(registration_bp, url_prefix='/api/registration')

# إعداد قاعدة البيانات
app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{os.path.join(os.path.dirname(__file__), 'database', 'app.db')}"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db.init_app(app)

with app.app_context():
    db.create_all()

@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve(path):
    static_folder_path = app.static_folder
    if static_folder_path is None:
            return "Static folder not configured", 404

    if path != "" and os.path.exists(os.path.join(static_folder_path, path)):
        return send_from_directory(static_folder_path, path)
    else:
        index_path = os.path.join(static_folder_path, 'index.html')
        if os.path.exists(index_path):
            return send_from_directory(static_folder_path, 'index.html')
        else:
            return "index.html not found", 404


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)

@import url('https://fonts.googleapis.com/css2?family=Tajawal:wght@200;300;400;500;700;800;900&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Tajawal', Arial, sans-serif;
  direction: rtl;
  text-align: right;
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  min-height: 100vh;
}

.form-step {
  animation: slideIn 0.3s ease-in-out;
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.progress-bar {
  transition: width 0.3s ease-in-out;
}

.input-field {
  transition: all 0.3s ease;
}

.input-field:focus {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(74, 144, 226, 0.15);
}

.btn-primary {
  background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%);
  transition: all 0.3s ease;
}

.btn-primary:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(255, 107, 53, 0.3);
}

.btn-secondary {
  background: linear-gradient(135deg, #4A90E2 0%, #357ABD 100%);
  transition: all 0.3s ease;
}

.btn-secondary:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(74, 144, 226, 0.3);
}

.card {
  backdrop-filter: blur(10px);
  background: rgba(255, 255, 255, 0.9);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.file-upload-area {
  border: 2px dashed #4A90E2;
  transition: all 0.3s ease;
}

.file-upload-area:hover {
  border-color: #FF6B35;
  background-color: rgba(255, 107, 53, 0.05);
}

.file-upload-area.dragover {
  border-color: #FF6B35;
  background-color: rgba(255, 107, 53, 0.1);
  transform: scale(1.02);
}

/* App.css - أنماط التطبيق الرئيسية */

.App {
  text-align: center;
}

/* تحسينات عامة للتطبيق */
* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: 'Tajawal', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  direction: rtl;
  text-align: right;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'bright-orange': '#FF6B35',
        'bright-blue': '#4A90E2',
        'bright-yellow': '#FFD93D',
        'bright-green': '#6BCF7F',
        'bright-purple': '#9B59B6',
        'bright-pink': '#E91E63',
      },
      fontFamily: {
        'arabic': ['Tajawal', 'Arial', 'sans-serif'],
      },
    },
  },
  plugins: [],
}


import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'
import path from 'path'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(),tailwindcss()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  server: {
    host: true,
    hmr: {
      clientPort: 443,
    },
  },
})



<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>حاضِن - تطبيق ولي الأمر</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

import React from 'react';
import SimpleForm from './components/SimpleForm';
import './App.css';

function App() {
  return (
    <div className="App">
      <SimpleForm />
    </div>
  );
}

export default App;
